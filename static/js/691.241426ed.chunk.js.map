{"version":3,"file":"static/js/691.241426ed.chunk.js","mappings":"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","sources":["components/ButtonAddTransactions/ButtonAddTransactions.styled.js","components/ButtonAddTransactions/ButtonAddTransactions.jsx","components/TransactionsList/TransactionsList.styled.js","components/TransactionsList/normalizedDate.js","components/TransactionsList/TransactionsList.jsx","components/HomeTab/HomeTab.styles.jsx","components/HomeTab/HomeTab.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","components/upDateModal/upDateModal.jsx","pages/HomePage/HomePage.styled.js","components/ModalConfirmation/ModalConfirmation.jsx","pages/HomePage/HomePage.jsx","redux/categories/categoriesSelectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  position: fixed;\n  /* position: absolute; */\n  bottom: 20px;\n  right: 20px;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  @media screen and (min-width: 768px) {\n    bottom: 40px;\n    right: 40px;\n  }\n  @media screen and (min-width: 1280px) {\n    bottom: 62px;\n    right: 52px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { openModalAddTransaction } from 'redux/global/globalSlice';\nimport { Button } from './ButtonAddTransactions.styled';\nimport { HiPlus } from 'react-icons/hi2';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button onClick={() => dispatch(openModalAddTransaction())}>\n      <HiPlus\n        style={{\n          display: 'block',\n          width: '50px',\n          height: '50px',\n          backgroundColor: '#24cca7',\n          borderRadius: '50%',\n        }}\n        color=\"white\"\n      />\n    </Button>\n  );\n};\n","import styled from 'styled-components';\n\n// import Icons from 'images/icons.svg';\n\nexport const Container = styled.div`\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n  height: 520px;\n  /* overflow: auto; */\n`;\n\nexport const Table = styled.table``;\n\n// Head of table\n\nexport const TrHead = styled.tr`\n  background: var(--form-background-color);\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const ThDay = styled.th`\n  width: 15%;\n  text-align: left;\n  padding-left: 20px;\n  padding-top: 15px;\n  padding-bottom: 16px;\n  border-top-left-radius: 30px;\n  border-bottom-left-radius: 30px;\n`;\n\nexport const ThType = styled.th`\n  width: 10%;\n  text-align: center;\n`;\n\nexport const ThCategore = styled.th`\n  width: 15%;\n  text-align: left;\n`;\n\nexport const ThComment = styled.th`\n  width: 30%;\n  text-align: left;\n`;\n\nexport const ThCurrency = styled.th`\n  width: 10%;\n  text-align: right;\n`;\n\nexport const ThEdit = styled.th`\n  width: 5%;\n  text-align: center;\n`;\n\nexport const ThDel = styled.th`\n  width: 5%;\n  text-align: right;\n  padding-right: 30px;\n  border-top-right-radius: 30px;\n  border-bottom-right-radius: 30px;\n`;\n\n// Body of table\n\nexport const TrData = styled.tr`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  border-bottom: 1px solid #dcdcdf;\n  :not(:last-child) {\n    box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n  }\n  :last-child {\n    border-bottom: 0;\n  }\n`;\n\nexport const TdDate = styled.td`\n  padding-left: 20px;\n  padding-top: 16px;\n  padding-bottom: 14px;\n`;\n\nexport const TdType = styled.td`\n  text-align: center;\n`;\n\nexport const TdCadegory = styled.td`\n  text-align: left;\n`;\n\nexport const TdComment = styled.td`\n  text-align: left;\n`;\n\nexport const TdAmount = styled.td`\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: right;\n  color: ${props =>\n    props.type === 'INCOME'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n\nexport const TdEdit = styled.td`\n  text-align: right;\n`;\n\nexport const TdDel = styled.td`\n  text-align: left;\n`;\n\n// Buttons\n\nexport const EditButton = styled.button`\n  font-size: 16px;\n  cursor: pointer;\n  background-color: transparent;\n  padding-right: 0;\n  border: none;\n  display: flex;\n  align-items: center;\n  margin-right: 5px;\n  margin-left: 12px;\n  padding: 0;\n`;\n\nexport const DelButton = styled.button`\n  min-width: 67px;\n  min-height: 26px;\n  border-radius: 18px;\n  margin-right: 12px;\n  background-color: var(--text-green-color);\n  color: var(--text-white-color);\n  border: none;\n  cursor: pointer;\n`;\n\n// Mobile\nexport const MobList = styled.ul`\n  font-size: 16px;\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n\n  width: 100%;\n  margin: 0 auto 8px;\n  background: var(--form-background-color);\n  border-radius: 10px;\n  border-left: 5px solid\n    ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;\n\nexport const MobItem = styled.li`\n  padding: 12px 20px;\n  height: 47px;\n  display: flex;\n  align-items: center;\n  &:not(:last-child) {\n    border-bottom: 1px solid #dcdcdf;\n  }\n  justify-content: space-between;\n  line-height: calc(27 / 18);\n`;\n\nexport const MobHeader = styled.span`\n  font-weight: 700;\n  font-size: 18px;\n`;\n\nexport const MobComment = styled.span`\n  width: 80px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: pre-line;\n`;\n\nexport const MobSum = styled.span`\n  color: ${props =>\n    props.type === 'income'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n","export const normalizedDate = date => {\n  const dateToString = new Date(date);\n  const day = dateToString.getDate().toString().padStart(2, '0');\n  const month = (dateToString.getMonth() + 1).toString().padStart(2, '0');\n  const year = dateToString.getFullYear().toString().slice(2);\n  return `${day}.${month}.${year}`;\n};\n","import { GrFormEdit } from 'react-icons/gr';\nimport { useMedia } from 'react-use';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectFinanceData } from 'redux/transaction/transactionSelectors';\nimport { openModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { useEffect } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { openModalConfirmation } from 'redux/global/globalSlice';\nimport {\n  Container,\n  Table,\n  TrHead,\n  ThDay,\n  ThType,\n  ThCategore,\n  ThComment,\n  ThCurrency,\n  ThEdit,\n  ThDel,\n  TrData,\n  TdDate,\n  TdType,\n  TdCadegory,\n  TdComment,\n  TdAmount,\n  TdEdit,\n  TdDel,\n  EditButton,\n  DelButton,\n  MobList,\n  MobItem,\n  MobHeader,\n  MobComment,\n  MobSum,\n} from './TransactionsList.styled';\nimport { normalizedDate } from './normalizedDate';\nimport PropTypes from 'prop-types';\n\nexport const TransactionsList = ({ data, info }) => {\n  const isTablet = useMedia('(min-width: 768px)');\n \n  const categories = useSelector(selectCategories);\n  const financeData = useSelector(selectFinanceData);\n  const [trans, setTrans] = useState('');\n  const dispatch = useDispatch();\n\n  const saveTransaction = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalUpDateTransaction());\n    \n  };\n\n  const saveTransactionForDelete = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalConfirmation());\n  };\n\n  const takeNameCategories = id => {\n    let nameCategories = categories.find(categorie => categorie.id === id);\n    if (nameCategories) return nameCategories.name;\n  };\n\n  useEffect(() => {\n    trans && info(trans);\n    setTrans('')\n    console.log(trans)\n  }, [dispatch, info, trans]);\n\n  return (\n    <>\n      {!isTablet ? (\n        <>\n          {data.map(\n            ({ id, transactionDate, type, categoryId, comment, amount }) => (\n              <MobList key={id} type={type.toLowerCase()}>\n                <MobItem>\n                  <MobHeader>Date</MobHeader>\n                  {normalizedDate(transactionDate)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Type</MobHeader>\n                  {type.toLowerCase() === 'income' ? '+' : '-'}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Category</MobHeader>\n                  {takeNameCategories(categoryId)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Comment</MobHeader>\n                  <MobComment>{comment}</MobComment>\n                </MobItem>\n                <MobItem style={{ fontWeight: '700' }}>\n                  <MobHeader>Sum</MobHeader>\n                  <MobSum type={type.toLowerCase()}>{amount.toFixed(2)}</MobSum>\n                </MobItem>\n                <MobItem>\n                  <DelButton\n                    onClick={() => saveTransactionForDelete(id)}\n                  >\n                    Delete\n                  </DelButton>\n                  <EditButton onClick={() => saveTransaction(id)}>\n                    <GrFormEdit\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        width: '30px',\n                        height: '30px',\n                      }}\n                    />\n                    Edit\n                  </EditButton>\n                </MobItem>\n              </MobList>\n            )\n          )}\n        </>\n      ) : (\n        //desctop\n        <Container>\n          <Table>\n            <thead>\n              <TrHead>\n                <ThDay>Date</ThDay>\n                <ThType>Type</ThType>\n                <ThCategore>Cotegory</ThCategore>\n                <ThComment>Comment</ThComment>\n                <ThCurrency>Currency</ThCurrency>\n                <ThEdit></ThEdit>\n                <ThDel></ThDel>\n              </TrHead>\n            </thead>\n            <tbody>\n              {data.map(\n                ({\n                  id,\n                  transactionDate,\n                  type,\n                  categoryId,\n                  comment,\n                  amount,\n                }) => (\n                  <TrData key={id}>\n                    <TdDate>{normalizedDate(transactionDate)}</TdDate>\n                    <TdType>\n                      {type.toLowerCase() === 'income' ? '+' : '-'}\n                    </TdType>\n                    <TdCadegory>{takeNameCategories(categoryId)}</TdCadegory>\n                    <TdComment>{comment}</TdComment>\n                    <TdAmount type={type}>{amount.toFixed(2)}</TdAmount>\n                    <TdEdit>\n                      <EditButton onClick={() => saveTransaction(id)}>\n                        <GrFormEdit\n                          style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            width: '30px',\n                            height: '30px',\n                          }}\n                        />\n                      </EditButton>\n                    </TdEdit>\n                    <TdDel>\n                      <DelButton\n                        onClick={() => saveTransactionForDelete(id)}\n                      >\n                        Delete\n                      </DelButton>\n                    </TdDel>\n                  </TrData>\n                )\n              )}\n            </tbody>\n          </Table>\n        </Container>\n      )}\n    </>\n  );\n};\n\n\nTransactionsList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      transactionDate: PropTypes.number.isRequired,\n      type: PropTypes.string.isRequired,\n      categoryId: PropTypes.string.isRequired,\n      comment: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n  info: PropTypes.func,\n};","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0;\n  width: 100%;\n  /* min-height: 100vh; */\n  /* display: flex;\n  flex-direction: column; */\n  @media screen and (min-width: 480px) {\n    width: 440px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 704px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 784px;\n    padding: 46px 0 0 69px;\n  }\n`;\n","import { TransactionsList } from 'components/TransactionsList/TransactionsList';\nimport {\n  selectFinanceData,\n  selectIsLoading,\n} from 'redux/transaction/transactionSelectors';\nimport { useSelector } from 'react-redux';\nimport { fetchAllTransactions } from 'redux/transaction/transactionOperations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Rings } from 'react-loader-spinner';\nimport { Container } from './HomeTab.styles';\nimport PropTypes from 'prop-types';\n\nexport const HomeTab = ({info}) => {\n  const financeData = useSelector(selectFinanceData);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const compareData = financeData.map(obj => ({\n    ...obj,\n    transactionDate: Date.parse(obj.transactionDate),\n  }));\n  const sortDate = [...compareData].sort(\n    (a, b) => b.transactionDate - a.transactionDate\n  );\n\n  \n\n  useEffect(() => {\n    dispatch(fetchAllTransactions());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {financeData.length === 0 ? (\n        <p> You don't have transactions yet. </p>\n      ) : (\n        <div>\n          {isLoading ? (\n            <Rings />\n          ) : (\n            <>\n              <TransactionsList data={sortDate} info={info} />\n            </>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n\nHomeTab.propTypes = {\n  info:PropTypes.func,\n};","import { useState } from 'react';\nimport {\n  CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  LabelTextExpense,\n  Form,\n  Span,\n  Icon,\n  ModalInputWrap,\n  InputData,\n} from './ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModalAddTransaction } from 'redux/global/globalSlice';\nimport { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { useEffect } from 'react';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { Formik, ErrorMessage } from 'formik';\nimport { object, string, number, date } from 'yup';\nimport Icons from 'images/icons.svg';\n\nconst validationSchema = object().shape({\n  transactionDate: date().required('Data is a required field'),\n  categoryId: string(),\n  amount: number().required('Amount is a required field').positive(),\n  comment: string(),\n});\n\nexport const ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const [transactionDate, setTransactionDate] = useState(new Date(Date.now()));\n  const [checked, setChecked] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = e => {\n    e.preventDefault();\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  // 1 Закриваємо по Esc\n  useEffect(() => {\n    const onEscClick = evt => {\n      if (evt.code === 'Escape') dispatch(closeModalAddTransaction());\n    };\n\n    window.addEventListener('keydown', onEscClick);\n    return () => {\n      window.removeEventListener('keydown', onEscClick);\n    };\n  }, [dispatch]);\n  //______________________\n\n  // 2 Закриваємо по Overlay\n  const onOverlayClose = evt => {\n    if (evt.currentTarget === evt.target) dispatch(closeModalAddTransaction());\n  };\n  //______________________\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const date = new Date(\n    transactionDate.toString().replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1')\n  );\n  console.log(date)\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  const renderError = message => <Span>{message}</Span>;\n\n  return (\n    <Overlay onClick={onOverlayClose}>\n      <Modal>\n\n        <ModalButtonClose type=\"button\" onClick={()=> {dispatch(closeModalAddTransaction());}}>\n\n          <IconContext.Provider value={{ size: '3em' }}>\n            <IoCloseOutline />\n          </IconContext.Provider>\n        </ModalButtonClose>\n        <Formik\n          initialValues={{\n            transactionDate,\n            categoryId: '',\n            amount: '',\n            comment: '',\n            type: '',\n          }}\n          onSubmit={values => {\n            const currentCategorie = categories.find(\n              cat => cat.name === values.categoryId\n            );\n\n            dispatch(\n              addTransaction({\n                transactionDate,\n                type: !checked ? 'INCOME' : 'EXPENSE',\n                categoryId: !checked\n                  ? categories[10].id\n                  : (currentCategorie && currentCategorie.id) ||\n                    categories[0].id,\n                comment: values.comment,\n                amount: !checked\n                  ? Number(values.amount)\n                  : -Number(values.amount),\n              })\n            );\n          }}\n          validationSchema={validationSchema}\n        >\n          {({\n            errors,\n            touched,\n            values,\n            handleSubmit,\n            handleBlur,\n            handleChange,\n            isSubmitting,\n            setFieldValue,\n          }) => (\n            <Form   onSubmit={handleSubmit}>\n              <ModalTitle> Add transaction</ModalTitle>\n\n              <Input\n                onChange={onChange}\n                checked={checked}\n                type=\"checkbox\"\n                name=\"checkbox\"\n                id=\"topic-1\"\n                onBlur={handleBlur}\n              />\n\n              <ModalWrap>\n                <LabelText checked={checked}>Income</LabelText>\n                <CheckboxLabel\n                  htmlFor=\"topic-1\"\n                  checked={checked}\n                ></CheckboxLabel>\n                <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n              </ModalWrap>\n\n              {checked && (\n                <SelectLabel\n                  name=\"categoryId\"\n                  onChange={handleChange}\n                  value={values.categoryId}\n                  onBlur={handleBlur}\n                >\n                  {categories &&\n                    categoriesFilter.map(({ id, name }) => {\n                      return (\n                        <option key={id} id={id}>\n                          {name}\n                        </option>\n                      );\n                    })}\n                </SelectLabel>\n              )}\n\n              <ModalInputWrap>\n                <div>\n                  <InputLabel\n                    value={values.amount}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"0.00\"\n\n                    // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    // title=\"Amount must be digits and can contain spaces, dashes, parentheses\"\n                  />\n                  <ErrorMessage name=\"amount\" render={renderError} />\n                </div>\n\n                <Datetime\n                  open={isOpen}\n                  timeFormat={false}\n                  name={transactionDate}\n                  value={transactionDate}\n                  id=\"date\"\n                  type=\"date\"\n                  input={true}\n                  selected={transactionDate}\n                  maxDate={new Date()}\n                  onBlur={handleBlur}\n                  // dateFormat = \"dd-MM-yyyy\"\n                  onChange={newValue => {\n                    setTransactionDate(moment(newValue).toISOString());\n                  }}\n                  renderInput={params => <InputData {...params} />}\n                />\n                <Icon onClick={handleClick}>\n                  <use href={`${Icons}#icon-calendar`} />\n                </Icon>\n              </ModalInputWrap>\n              <InputLabelText\n                value={values.comment}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                name=\"comment\"\n                placeholder=\"Comment\"\n              />\n\n              <ModalButtonWrap>\n                <ModalButtonAdd type=\"submit\" disabled={isSubmitting}>\n                  Add\n                </ModalButtonAdd>\n                <ModalButtonCancel type=\"button\" onClick={()=>{dispatch(closeModalAddTransaction())}}>\n                  Cancel\n                </ModalButtonCancel>\n              </ModalButtonWrap>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport {\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  CheckboxLabel,\n  LabelTextExpense,\n  ModalInputWrap,\n  InputData,\n} from '../ModalAddTransaction/ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport 'react-datetime/css/react-datetime.css';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\nimport { closeModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { upDateTransaction } from 'redux/transaction/transactionOperations';\nimport PropTypes from 'prop-types';\n\nexport const UpDateModal = ({ trans, close }) => {\n  const findcategorie = useSelector(selectCategories);\n  console.log('trans ', trans);\n  const [categoryId, setCategoryId] = useState(trans.categoryId);\n  const [amount, setAmount] = useState(Math.abs(trans.amount));\n  const [transactionDate, setTransactionDate] = useState(trans.transactionDate);\n  const [comment, setComment] = useState(trans.comment);\n  const [, setType] = useState(trans.type);\n  const [checked, setChecked] = useState(\n    trans.type === 'INCOME' ? false : true\n  );\n\n  const findcategoryId = name => {\n    const CategoryId = findcategorie.find(tran => tran.name === name);\n    setCategoryId(CategoryId.id);\n  };\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newObject = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked ? categories[10].id : categoryId,\n      comment,\n      amount: !checked ? Number(amount) : -Number(Math.abs(amount)),\n    };\n\n    dispatch(\n      upDateTransaction({ transactionId: trans.id, dataInfo: newObject })\n    );\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      findcategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalUpDateTransaction());\n      close(null);\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  const xxx = [...categoriesFilter].sort(function (x, y) {\n    return x.id === categoryId ? -1 : y.id === categoryId ? 1 : 0;\n  });\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <Modal>\n          <ModalButtonClose type=\"button\" onClick={onClose}>\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n          <ModalForm onSubmit={handleSubmit}>\n            <ModalTitle> Update transaction</ModalTitle>\n            <Input\n              onChange={onChange}\n              checked={checked}\n              type=\"checkbox\"\n              name=\"size\"\n              disabled\n              // name=\"topic\"\n              id=\"topic-1\"\n            />\n            <ModalWrap>\n              <LabelText checked={checked}>Income</LabelText>\n              <CheckboxLabel\n                htmlFor=\"topic-1\"\n                checked={checked}\n              ></CheckboxLabel>\n              <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n            </ModalWrap>\n\n            {checked && (\n              <SelectLabel\n                name=\"size\"\n                disabled\n                // name=\"categoryId\"\n                onChange={handleChange}\n                value={categoryId}\n              >\n                {categories &&\n                  xxx.map(({ id, name }) => {\n                    return (\n                      <option key={id} id={id}>\n                        {name}\n                      </option>\n                    );\n                  })}\n              </SelectLabel>\n            )}\n\n            <ModalInputWrap>\n              <InputLabel\n                value={amount}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                placeholder=\"0.00\"\n              />\n              <InputData\n                value={transactionDate}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                disabled\n              />\n            </ModalInputWrap>\n            <InputLabelText\n              value={comment}\n              onChange={handleChange}\n              name=\"comment\"\n              placeholder=\"Comment\"\n            />\n\n            <ModalButtonWrap>\n              <ModalButtonAdd type=\"submit\">upDate</ModalButtonAdd>\n              <ModalButtonCancel type=\"button\" onClick={onClose}>\n                Cancel\n              </ModalButtonCancel>\n            </ModalButtonWrap>\n          </ModalForm>\n        </Modal>\n      </Overlay>\n    </>\n  );\n};\n\nUpDateModal.propTypes = {\n  trans: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    transactionDate: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    categoryId: PropTypes.string.isRequired,\n    comment: PropTypes.string.isRequired,\n    amount: PropTypes.number.isRequired,\n  }).isRequired,\n  close: PropTypes.func.isRequired,\n};\n","import styled from \"styled-components\";\n\nexport const BlockForAddButton = styled.div`\nposition: relative;\n`","import {\n  ModalButtonClose,\n} from 'components/ModalAddTransaction/ModalAddTransaction.styled';\nimport { IconContext } from 'react-icons';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { useDispatch } from 'react-redux';\nimport { closeModalConfirmation } from 'redux/global/globalSlice';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport {\n  ModalBtnCancel,\n  ModalButtonWrapper,\n  ModalButtonYes,\n  ModalConfirmationText,\n  ModalConfirmationTitle,\n  ModalContainer,\n  Overlay,\n} from './ModalConfirmation.styled';\nimport PropTypes from 'prop-types';\n\nexport const ModalConfirmation = ({transId}) => {\n  console.log(transId);\n  const dispatch = useDispatch();\n\n  \n\n  const onClose = evt => {\n    if (evt.code === 'Escape' || evt.currentTarget === evt.target) {\n      dispatch(closeModalConfirmation());\n    }\n  };\n\n\n\n  window.addEventListener('keydown', onClose);\n\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <ModalContainer>\n          <ModalButtonClose\n            type=\"button\"\n            onClick={() => dispatch(closeModalConfirmation())}\n          >\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n\n          <ModalConfirmationTitle>Confirmation</ModalConfirmationTitle>\n          <ModalConfirmationText>\n            Are you sure you want this?\n          </ModalConfirmationText>\n\n          <ModalButtonWrapper>\n            <ModalBtnCancel\n              type=\"button\"\n              onClick={() => dispatch(closeModalConfirmation())}\n            >\n              Cancel\n            </ModalBtnCancel>\n            <ModalButtonYes\n              type=\"button\"\n              \n              onClick={()=>dispatch(deleteTransaction(transId.id))}\n            >\n              Yes, I'm sure!\n            </ModalButtonYes>\n          </ModalButtonWrapper>\n        </ModalContainer>\n      </Overlay>\n    </>\n  );\n};\n\nModalConfirmation.propTypes = {\n  transId: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};","import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport {\n  selectAddTransactionOpen,\n  selectUpDateTransactionsModal,\n  selectModalConfirmation,\n} from 'redux/global/globalSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useEffect } from 'react';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { useState } from 'react';\nimport { useMedia } from 'react-use';\nimport { UpDateModal } from 'components/upDateModal/upDateModal';\nimport { BlockForAddButton } from './HomePage.styled';\nimport { ModalConfirmation } from 'components/ModalConfirmation/ModalConfirmation';\nimport { Balance } from 'components/Balance/Balance';\nconst HomePage = () => {\n  const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n  const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n  const isModalConfirmations = useSelector(selectModalConfirmation);\n  console.log(isModalAddTransactionOpen);\n  console.log(isModalUpDateTransaction);\n  console.log(isModalConfirmations);\n  const dispatch = useDispatch();\n  const isTablet = useMedia('(min-width: 768px)');\n\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {!isTablet && <Balance />}\n      <BlockForAddButton>\n      <HomeTab info={setData} />\n      <ButtonAddTransactions />\n      {isModalConfirmations && data && (\n        <ModalConfirmation transId={data} />\n      )}\n      {isModalUpDateTransaction && data && (\n        <UpDateModal trans={data} close={setData} />\n      )}\n      {isModalAddTransactionOpen && <ModalAddTransaction />}\n    </BlockForAddButton>\n    </div>\n  );\n};\n\nexport default HomePage;\n\n\n\n// import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\n// import { HomeTab } from 'components/HomeTab/HomeTab';\n// import {\n//   selectAddTransactionOpen,\n//   selectUpDateTransactionsModal,\n//   selectModalConfirmation,\n// } from 'redux/global/globalSelectors';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\n// import { useEffect } from 'react';\n// import { fetchCategories } from 'redux/categories/categoriesOperations';\n// import { useState } from 'react';\n// import { UpDateModal } from 'components/upDateModal/upDateModal';\n// import { BlockForAddButton } from './HomePage.styled';\n// import { ModalConfirmation } from 'components/ModalConfirmation/ModalConfirmation';\n\n// const HomePage = () => {\n//   const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n//   const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n//   const isModalConfirmations = useSelector(selectModalConfirmation);\n//   console.log(isModalAddTransactionOpen);\n//   console.log(isModalUpDateTransaction);\n//   console.log(isModalConfirmations);\n//   const dispatch = useDispatch();\n\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     dispatch(fetchCategories());\n//   }, [dispatch]);\n\n//   return (\n//     <BlockForAddButton>\n//       <HomeTab info={setData} />\n//       <ButtonAddTransactions />\n//       {isModalConfirmations && data && (\n//         <ModalConfirmation transId={data} />\n//       )}\n//       {isModalUpDateTransaction && data && (\n//         <UpDateModal trans={data} close={setData} />\n//       )}\n//       {isModalAddTransactionOpen && <ModalAddTransaction />}\n//     </BlockForAddButton>\n//   );\n// };\n\n// export default HomePage;\n","export const selectCategories = state=>state.categories.categories;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n"],"names":["Button","styled","ButtonAddTransactions","dispatch","useDispatch","onClick","openModalAddTransaction","style","display","width","height","backgroundColor","borderRadius","color","Container","Table","TrHead","ThDay","ThType","ThCategore","ThComment","ThCurrency","ThEdit","ThDel","TrData","TdDate","TdType","TdCadegory","TdComment","TdAmount","props","type","TdEdit","TdDel","EditButton","DelButton","MobList","MobItem","MobHeader","MobComment","MobSum","normalizedDate","date","dateToString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","TransactionsList","data","info","isTablet","useMedia","categories","useSelector","selectCategories","financeData","selectFinanceData","useState","trans","setTrans","saveTransaction","id","find","openModalUpDateTransaction","saveTransactionForDelete","openModalConfirmation","takeNameCategories","nameCategories","categorie","name","useEffect","console","log","map","transactionDate","categoryId","comment","amount","toLowerCase","toFixed","alignItems","fontWeight","HomeTab","isLoading","selectIsLoading","compareData","obj","parse","sortDate","sort","a","b","fetchAllTransactions","length","validationSchema","object","shape","required","string","number","positive","ModalAddTransaction","now","setTransactionDate","checked","setChecked","isOpen","setIsOpen","handleClick","e","preventDefault","fetchCategories","onEscClick","evt","code","closeModalAddTransaction","window","addEventListener","removeEventListener","onChange","target","replace","categoriesFilter","filter","cat","renderError","message","currentTarget","value","size","initialValues","onSubmit","values","currentCategorie","addTransaction","Number","errors","touched","handleSubmit","handleBlur","handleChange","isSubmitting","setFieldValue","onBlur","htmlFor","placeholder","render","open","timeFormat","input","selected","maxDate","newValue","moment","toISOString","renderInput","params","href","Icons","disabled","UpDateModal","close","findcategorie","setCategoryId","Math","abs","setAmount","setComment","setType","CategoryId","tran","findcategoryId","onClose","nodeName","closeModalUpDateTransaction","xxx","x","y","newObject","upDateTransaction","transactionId","dataInfo","BlockForAddButton","ModalConfirmation","transId","closeModalConfirmation","deleteTransaction","isModalAddTransactionOpen","selectAddTransactionOpen","isModalUpDateTransaction","selectUpDateTransactionsModal","isModalConfirmations","selectModalConfirmation","setData","Balance","state"],"sourceRoot":""}