{"version":3,"file":"static/js/704.5437fc57.chunk.js","mappings":"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","sources":["components/ButtonAddTransactions/ButtonAddTransactions.styled.js","components/ButtonAddTransactions/ButtonAddTransactions.jsx","redux/transaction/transactionSelectors.js","redux/categories/categoriesSelectors.js","components/TransactionsList/TransactionsList.styled.js","components/TransactionsList/normalizedDate.js","components/TransactionsList/TransactionsList.jsx","components/HomeTab/HomeTab.styles.jsx","components/HomeTab/HomeTab.jsx","redux/global/globalSelectors.js","components/ModalAddTransaction/ModalAddTransaction.styled.js","components/ModalAddTransaction/ModalAddTransaction.jsx","components/upDateModal/upDateModal.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  position: absolute;\n  top: 87%;\n  left: 91%;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { openModalAddTransaction } from 'redux/global/globalSlice';\nimport { Button } from './ButtonAddTransactions.styled';\nimport { HiPlus } from 'react-icons/hi2';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button onClick={() => dispatch(openModalAddTransaction())}>\n      <HiPlus\n        style={{\n          display: 'block',\n          width: '50px',\n          height: '50px',\n          backgroundColor: '#24cca7',\n          borderRadius: '50%',\n        }}\n        color=\"white\"\n      />\n    </Button>\n  );\n};\n","export const selectFinanceData = state => state.transactions.finance.data;\nexport const selectIsLoading = state => state.transactions.isLoading;\nexport const selectTotalBalance = state => state.transactions.totalBalance;\nexport const selectError = state => state.transactions.error;\n","export const selectCategories = state=>state.categories.categories;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","import styled from 'styled-components';\n\n// import Icons from 'images/icons.svg';\n\nexport const Container = styled.div`\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n  height: 520px;\n  overflow: auto;\n`;\n\nexport const Table = styled.table`\n`;\n\n// Head of table\n\nexport const TrHead = styled.tr`\n  background: var(--form-background-color);\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const ThDay = styled.th`\n  width: 15%;\n  text-align: left;\n  padding-left: 20px;\n  padding-top: 15px;\n  padding-bottom: 16px;\n  border-top-left-radius: 30px;\n  border-bottom-left-radius: 30px;\n`;\n\nexport const ThType = styled.th`\n  width: 10%;\n  text-align: center;\n`;\n\nexport const ThCategore = styled.th`\n  width: 15%;\n  text-align: left;\n`;\n\nexport const ThComment = styled.th`\n  width: 30%;\n  text-align: left;\n`;\n\nexport const ThCurrency = styled.th`\n  width: 10%;\n  text-align: right;\n`;\n\nexport const ThEdit = styled.th`\n  width: 5%;\n  text-align: center;\n`;\n\nexport const ThDel = styled.th`\n  width: 5%;\n  text-align: right;\n  padding-right: 30px;\n  border-top-right-radius: 30px;\n  border-bottom-right-radius: 30px;\n`;\n\n// Body of table\n\nexport const TrData = styled.tr`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  border-bottom: 1px solid #dcdcdf;\n  :not(:last-child) {\n    box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n  }\n  :last-child {\n    border-bottom: 0;\n  }\n`;\n\nexport const TdDate = styled.td`\n  padding-left: 20px;\n  padding-top: 16px;\n  padding-bottom: 14px;\n`;\n\nexport const TdType = styled.td`\n  text-align: center;\n`;\n\nexport const TdCadegory = styled.td`\n  text-align: left;\n`;\n\nexport const TdComment = styled.td`\n  text-align: left;\n`;\n\nexport const TdAmount = styled.td`\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: right;\n  color: ${props =>\n    props.type === 'INCOME'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n\nexport const TdEdit = styled.td`\n  text-align: right;\n`;\n\nexport const TdDel = styled.td`\n  text-align: left;\n`;\n\n// Buttons\n\nexport const EditButton = styled.button`\n  font-size: 16px;\n  cursor: pointer;\n  background-color: transparent;\n  padding-right: 0;\n  border: none;\n  display: flex;\n  align-items: center;\n  margin-right: 5px;\n  padding: 0 0 0 12px;\n`;\n\nexport const DelButton = styled.button`\n  min-width: 67px;\n  min-height: 26px;\n  border-radius: 18px;\n  margin-right: 12px;\n  background-color: var(--text-green-color);\n  color: var(--text-white-color);\n  border: none;\n  cursor: pointer;\n`;\n\n// Mobile\nexport const MobList = styled.ul`\nfont-size: 16px;\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n\n  width: 280px;\n  margin: 0 auto 8px;\n  background: var(--form-background-color);\n  border-radius: 10px;\n  border-left: 5px solid\n    ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;\n\nexport const MobItem = styled.li`\n  padding: 12px 20px;\n  height: 47px;\n  display: flex;\n  align-items: center;  \n  &:not(:last-child) {\n    border-bottom: 1px solid #dcdcdf;\n  }\n  justify-content: space-between;\n  line-height: calc(27 / 18);\n`;\n\nexport const MobHeader = styled.span`\n  font-weight: 700;\n  font-size: 18px;\n`;\n\nexport const MobComment = styled.span`\n  width: 80px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: pre-line;\n`;\n\nexport const MobSum = styled.span`\n  color: ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;","export const normalizedDate = date => {\n  const dateToString = new Date(date);\n  const day = dateToString.getDate().toString().padStart(2, '0');\n  const month = (dateToString.getMonth() + 1).toString().padStart(2, '0');\n  const year = dateToString.getFullYear().toString().slice(2);\n  return `${day}.${month}.${year}`;\n};\n","import { GrFormEdit } from 'react-icons/gr';\nimport { useMedia } from 'react-use';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectFinanceData } from 'redux/transaction/transactionSelectors';\nimport { openModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { useEffect } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport {\n  Container,\n  Table,\n  TrHead,\n  ThDay,\n  ThType,\n  ThCategore,\n  ThComment,\n  ThCurrency,\n  ThEdit,\n  ThDel,\n  TrData,\n  TdDate,\n  TdType,\n  TdCadegory,\n  TdComment,\n  TdAmount,\n  TdEdit,\n  TdDel,\n  EditButton,\n  DelButton,\n  MobList,\n  MobItem,\n  MobHeader,\n  MobComment,\n  MobSum,\n} from './TransactionsList.styled';\nimport { normalizedDate } from './normalizedDate';\n\nexport const TransactionsList = ({ data, info }) => {\n  const isMobile = useMedia('(max-width: 767px)');\n  //  console.log(data);\n\n  const sortData = data.map(obj => ({\n    ...obj,\n    transactionDate: new Date(obj.transactionDate).toISOString().substr(0, 10),\n  }));\n  // console.log(sortData);\n  const categories = useSelector(selectCategories);\n  const financeData = useSelector(selectFinanceData);\n  const [trans, setTrans] = useState('');\n  const dispatch = useDispatch();\n  const saveTransaction = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n  };\n\n  const takeNameCategories = id => {\n    let nameCategories = categories.find(categorie => categorie.id === id);\n    if (nameCategories) return nameCategories.name;\n  };\n\n  useEffect(() => {\n    console.log('trans', trans);\n    trans && info(trans);\n    dispatch(openModalUpDateTransaction());\n  }, [dispatch, info, trans]);\n\n  return (\n    <>\n      {isMobile ? (\n        <>\n          {sortData.map(\n            ({ id, transactionDate, type, categoryId, comment, amount }) => (\n              <MobList key={id} type={type.toLowerCase()}>\n                <MobItem>\n                  <MobHeader>Date</MobHeader>\n                  {normalizedDate(transactionDate)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Type</MobHeader>\n                  {type.toLowerCase() === 'income' ? '+' : '-'}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Category</MobHeader>\n                  {takeNameCategories(categoryId)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Comment</MobHeader>\n                  <MobComment>{comment}</MobComment>\n                </MobItem>\n                <MobItem style={{ fontWeight: '700' }}>\n                  <MobHeader>Sum</MobHeader>\n                  <MobSum type={type.toLowerCase()}>{amount.toFixed(2)}</MobSum>\n                </MobItem>\n                <MobItem>\n                  <DelButton onClick={() => dispatch(deleteTransaction(id))}>\n                    Delete\n                  </DelButton>\n                  <EditButton onClick={() => saveTransaction(id)}>\n                    <GrFormEdit\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        width: '30px',\n                        height: '30px',\n                      }}\n                    />\n                    Edit\n                  </EditButton>\n                </MobItem>\n              </MobList>\n            )\n          )}\n        </>\n      ) : (\n        //desctop\n        <Container>\n          <Table>\n            <thead>\n              <TrHead>\n                <ThDay>Date</ThDay>\n                <ThType>Type</ThType>\n                <ThCategore>Cotegory</ThCategore>\n                <ThComment>Comment</ThComment>\n                <ThCurrency>Currency</ThCurrency>\n                <ThEdit></ThEdit>\n                <ThDel></ThDel>\n              </TrHead>\n            </thead>\n            <tbody>\n              {sortData.map(\n                ({\n                  id,\n                  transactionDate,\n                  type,\n                  categoryId,\n                  comment,\n                  amount,\n                }) => (\n                  <TrData key={id}>\n                    <TdDate>{normalizedDate(transactionDate)}</TdDate>\n                    <TdType>\n                      {type.toLowerCase() === 'income' ? '+' : '-'}\n                    </TdType>\n                    <TdCadegory>{takeNameCategories(categoryId)}</TdCadegory>\n                    <TdComment>{comment}</TdComment>\n                    <TdAmount type={type}>{amount.toFixed(2)}</TdAmount>\n                    <TdEdit>\n                      <EditButton onClick={() => saveTransaction(id)}>\n                        <GrFormEdit\n                          style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            width: '30px',\n                            height: '30px',\n                          }}\n                        />\n                      </EditButton>\n                    </TdEdit>\n                    <TdDel>\n                      <DelButton\n                        onClick={() => dispatch(deleteTransaction(id))}\n                      >\n                        Delete\n                      </DelButton>\n                    </TdDel>\n                  </TrData>\n                )\n              )}\n            </tbody>\n          </Table>\n        </Container>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 46px 0 0 69px;\n  width: 784px;\n`;\n","import { TransactionsList } from 'components/TransactionsList/TransactionsList';\nimport {\n  selectFinanceData,\n  selectIsLoading,\n} from 'redux/transaction/transactionSelectors';\nimport { useSelector } from 'react-redux';\nimport { fetchAllTransactions } from 'redux/transaction/transactionOperations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Rings } from 'react-loader-spinner';\nimport { Container } from './HomeTab.styles';\n\nexport const HomeTab = props => {\n  const financeData = useSelector(selectFinanceData);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const compareData = financeData.map(obj => ({\n    ...obj,\n    transactionDate: Date.parse(obj.transactionDate),\n  }));\n  const sortDate = [...compareData].sort(\n    (a, b) => a.transactionDate - b.transactionDate\n  );\n\n  // console.log(sortDate);\n\n  useEffect(() => {\n    dispatch(fetchAllTransactions());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {financeData.length === 0 ? (\n        <p> You don't have transactions yet. </p>\n      ) : (\n        <div>\n          {isLoading ? (\n            <Rings />\n          ) : (\n            <>\n              <TransactionsList data={sortDate} info={props.info} />\n            </>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n","export const selectAddTransactionOpen = state=>state.global.isModalAddTransactionOpen;\nexport const selectUpDateTransactionsModal = state =>\n  state.global.isModalUpDateTransaction;","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.25);\n  z-index: 1200;\n`;\n\nexport const Modal = styled.div`\n  max-width: 540px;\n  width: 100%;\n  height: 580px;\n  padding: 40px 73px 64px 40px;\n  background-color: #ffffff;\n  border-radius: 20px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  /* gap: 40px; */\n  position: relative;\n  z-index: 1200;\n`;\n\nexport const ModalTitle = styled.p`\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 30px;\n  line-height: 45px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  margin-bottom: 42px;\n  color: #000000;\n`;\n\n// export const CheckboxInput = styled.input`\n// display: flex;\n//      gap: 9px;\n//      margin-top: 25px;\n//      align-items: center;\n//      justify-content: center;\n\n// `\n// ;\n\nexport const CheckboxLabel = styled.label`\n  &::before {\n    content: '';\n\n    width: 80px;\n    height: 40px;\n    background-color: #ffffff;\n    border: 1px solid #e0e0e0;\n    border-radius: 30px;\n    transition: box-shadow 250ms linear;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    padding-bottom: 8px;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 195px;\n    top: 139px;\n    width: 44px;\n    height: 44px;\n    background-color: #24cca7;\n    border-radius: 50px;\n    box-shadow: 0px 6px 15px rgba(36, 204, 167, 0.5);\n    transition: transform 250ms linear, background-color 250ms linear,\n      box-shadow 250ms linear;\n\n    text-align: center;\n    font-size: 10px;\n    font-weight: 500;\n    line-height: 2.8;\n    padding-top: 8px;\n\n    transform: ${props => props.checked && 'translate(42px)'};\n    background-color: ${props => (props.checked ? '#FF6596' : '#24CCA7')};\n  }\n`;\n\nexport const Input = styled.input`\n  opacity: 0;\n  pointer-events: none;\n  visibility: hidden;\n`;\n\n\nexport const LabelText = styled.span`\ncolor: ${props => (props.checked ? `#E0E0E0` : '#24CCA7')};\n`;\nexport const LabelTextExpense = styled.span`\ncolor: ${props => (props.checked ? `#FF6596` : '#E0E0E0')};\n`;\n\n\nexport const ModalForm = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const ModalWrap = styled.div`\n  display: flex;\n  gap: 32px;\n  align-items: center;\n  justify-content: center;\n  /* margin-right: 32px; */\n  margin-bottom: 44px;\n`;\n\nexport const SelectLabel = styled.select`\n  width: 394px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  margin-bottom: 40px;\n`;\n\nexport const InputLabel = styled.input`\n  width: 190px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: center;\n \n`;\n\nexport const InputLabelText = styled.input`\n  width: 394px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  margin-bottom: 40px;\n`;\n\nexport const ModalButtonWrap = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const ModalButtonAdd = styled.button`\n  width: 300px;\n  padding: 13px 65px 13px 71px;\n  border: none;\n  background-color: #24cca7;\n  border-radius: 20px;\n  color: #ffffff;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  text-align: center;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n`;\n\nexport const ModalButtonCancel = styled.button`\n  width: 300px;\n  padding: 13px 65px 13px 71px;\n  border: none;\n  background-color: #ffffff;\n  border: 1px solid #4a56e2;\n  border-radius: 20px;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  text-align: center;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  color: #4a56e2;\n`;\n\nexport const ModalButtonClose = styled.button`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  border: none;\n  background-color: #fff;\n  outline: blue;\n  padding: 0;\n  cursor: pointer;\n\n  &:hover {\n    /* background-color: red; */\n  }\n`;\n\n","import { useState } from 'react';\nimport {\n  CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  LabelTextExpense,\n} from './ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModalAddTransaction } from 'redux/global/globalSlice';\nimport { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { useEffect } from 'react';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\n\n// import { TextField } from '@mui/material';\n\nimport { IoCloseOutline } from 'react-icons/io5';\n\nimport { IconContext } from 'react-icons';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\n\nexport const ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const currentDate = new Date(Date.now());\n\n  const [transactionDate, setTransactionDate] = useState(currentDate);\n  const [, setType] = useState('');\n  const [categoryId, setCategoryId] = useState('');\n  const [comment, setComment] = useState('');\n  const [amount, setAmount] = useState('');\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      setCategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const date = new Date(\n      transactionDate.toString().replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1')\n    );\n\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n\n    const obj = {\n      transactionDate: date,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n    console.log(obj);\n\n    dispatch(addTransaction(obj));\n    reset();\n  };\n\n  const reset = () => {\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalAddTransaction());\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n\n  return (\n    <Overlay onClick={onClose}>\n      <Modal>\n        <ModalButtonClose type=\"button\" onClick={onClose}>\n          <IconContext.Provider value={{ size: '3em' }}>\n            <h3>\n              {' '}\n              <IoCloseOutline />{' '}\n            </h3>\n          </IconContext.Provider>\n        </ModalButtonClose>\n        <ModalForm onSubmit={handleSubmit}>\n          <ModalTitle> Add transaction</ModalTitle>\n\n          <Input\n            onChange={onChange}\n            checked={checked}\n            type=\"checkbox\"\n            name=\"topic\"\n            id=\"topic-1\"\n          />\n\n          <ModalWrap>\n            <LabelText checked={checked}>Income</LabelText>\n            <CheckboxLabel htmlFor=\"topic-1\" checked={checked}></CheckboxLabel>\n            <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n          </ModalWrap>\n\n          {checked && (\n            <SelectLabel\n              name=\"categoryId\"\n              onChange={handleChange}\n              value={categoryId}\n            >\n              {categories &&\n                categoriesFilter.map(({ id, name }) => {\n                  return (\n                    <option key={id} id={id}>\n                      {name}\n                    </option>\n                  );\n                })}\n            </SelectLabel>\n          )}\n\n          <ModalWrap>\n            <InputLabel\n              value={amount}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"0.00\"\n            />\n            <Datetime\n              timeFormat={false}\n              name={transactionDate}\n              value={transactionDate}\n              onChange={newValue => {\n                setTransactionDate(moment(newValue).toISOString());\n              }}\n              renderInput={params => <InputLabel {...params} />}\n            />\n          </ModalWrap>\n          <InputLabelText\n            value={comment}\n            onChange={handleChange}\n            name=\"comment\"\n            placeholder=\"Comment\"\n          />\n\n          <ModalButtonWrap>\n            <ModalButtonAdd type=\"submit\">Add</ModalButtonAdd>\n            <ModalButtonCancel type=\"button\" onClick={onClose}>\n              Cancel\n            </ModalButtonCancel>\n          </ModalButtonWrap>\n        </ModalForm>\n      </Modal>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport {\n  // CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  CheckboxLabel,\n  LabelTextExpense,\n  // Input,\n  // LabelText,\n  // LabelTextExpense,\n} from '../ModalAddTransaction/ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { closeModalAddTransaction } from 'redux/global/globalSlice';\n// import { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n// import { useEffect } from 'react';\n// import Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n// import moment from 'moment';\n// import { TextField } from '@mui/material';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\n\nimport { closeModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { upDateTransaction } from 'redux/transaction/transactionOperations';\n// import { ModalButtonCancel } from 'components/ModalAddTransaction/ModalAddTransaction.styled';\n\nexport const UpDateModal = ({ trans, close }) => {\n\n  const [categoryId, setCategoryId] = useState(trans.categoryId);\n  const [amount, setAmount] = useState(trans.amount);\n  const [transactionDate, setTransactionDate] = useState(trans.transactionDate);\n  const [comment, setComment] = useState(trans.comment);\n  const [, setType] = useState(trans.type);\n  const [checked, setChecked] = useState(trans.type === 'INCOME'? false:true);\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n\n\n  const handleSubmit = evt => {\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n    evt.preventDefault();\n    const newObject = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n\n    dispatch(\n      upDateTransaction({ transactionId:trans.id, dataInfo: newObject })\n    );\n      setTransactionDate('');\n      setType('');\n      setCategoryId('');\n      setComment('');\n      setAmount('');\n  };\n\n\n  const handleChange = evt => {\n    // console.log(evt.target);\n    const { value, name } = evt.target;\n       if (name === 'categoryId') {\n         setCategoryId(value);\n       } else if (name === 'amount') {\n         setAmount(value);\n       } else if (name === 'comment') {\n         setComment(value);\n       }\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalUpDateTransaction());\n\n      close('');\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n   const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <Modal>\n          <ModalButtonClose type=\"button\" onClick={onClose}>\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n          <ModalForm onSubmit={handleSubmit}>\n            <ModalTitle> Update transaction</ModalTitle>\n            <Input\n              onChange={onChange}\n              checked={checked}\n              type=\"checkbox\"\n              name=\"topic\"\n              id=\"topic-1\"\n            />\n            <ModalWrap>\n              <LabelText checked={checked}>Income</LabelText>\n              <CheckboxLabel\n                htmlFor=\"topic-1\"\n                checked={checked}\n              ></CheckboxLabel>\n              <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n            </ModalWrap>\n\n            {checked && (\n              <SelectLabel\n                name=\"categoryId\"\n                onChange={handleChange}\n                value={categoryId}\n              >\n                {categories &&\n                  categoriesFilter.map(({ id, name }) => {\n                    return (\n                      <option key={id} id={id}>\n                        {name}\n                      </option>\n                    );\n                  })}\n              </SelectLabel>\n            )}\n\n            <ModalWrap>\n              <InputLabel\n                value={amount}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                placeholder=\"0.00\"\n              />\n              {/* <Datetime\n                timeFormat={false}\n                name={transactionDate}\n                value={transactionDate}\n                renderInput={params => <InputLabel {...params} />}\n              /> */}\n              <InputLabel\n                value={transactionDate}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                disabled\n              />\n            </ModalWrap>\n            <InputLabelText\n              value={comment}\n              onChange={handleChange}\n              name=\"comment\"\n              placeholder=\"Comment\"\n            />\n\n            <ModalButtonWrap>\n              <ModalButtonAdd type=\"submit\">upDate</ModalButtonAdd>\n              <ModalButtonCancel type=\"button\" onClick={onClose}>\n                Cancel\n              </ModalButtonCancel>\n            </ModalButtonWrap>\n          </ModalForm>\n        </Modal>\n      </Overlay>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const BlockForAddButton = styled.div`\nposition: relative;\n`","import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport {\n  selectAddTransactionOpen,\n  selectUpDateTransactionsModal,\n} from 'redux/global/globalSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useEffect } from 'react';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { useState } from 'react';\nimport { UpDateModal } from 'components/upDateModal/upDateModal';\nimport { BlockForAddButton } from './HomePage.styled';\n\nconst HomePage = () => {\n  const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n  const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n  const dispatch = useDispatch();\n\n  const [data,setData]= useState(null)\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n \n\n  return (\n    <BlockForAddButton>\n      <HomeTab info={setData} />\n      <ButtonAddTransactions />\n      {isModalUpDateTransaction && data && <UpDateModal trans={data} close={setData}/>}\n      {isModalAddTransactionOpen && <ModalAddTransaction />}\n    </BlockForAddButton>\n  );\n};\n\nexport default HomePage;\n"],"names":["Button","styled","ButtonAddTransactions","dispatch","useDispatch","onClick","openModalAddTransaction","style","display","width","height","backgroundColor","borderRadius","color","selectFinanceData","state","transactions","finance","data","selectIsLoading","isLoading","selectCategories","categories","Container","Table","TrHead","ThDay","ThType","ThCategore","ThComment","ThCurrency","ThEdit","ThDel","TrData","TdDate","TdType","TdCadegory","TdComment","TdAmount","props","type","TdEdit","TdDel","EditButton","DelButton","MobList","MobItem","MobHeader","MobComment","MobSum","normalizedDate","date","dateToString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","TransactionsList","info","isMobile","useMedia","sortData","map","obj","transactionDate","toISOString","substr","useSelector","financeData","useState","trans","setTrans","saveTransaction","id","find","takeNameCategories","nameCategories","categorie","name","useEffect","console","log","openModalUpDateTransaction","categoryId","comment","amount","toLowerCase","fontWeight","toFixed","deleteTransaction","alignItems","HomeTab","compareData","parse","sortDate","sort","a","b","fetchAllTransactions","length","selectAddTransactionOpen","global","isModalAddTransactionOpen","selectUpDateTransactionsModal","isModalUpDateTransaction","Overlay","Modal","ModalTitle","CheckboxLabel","checked","Input","LabelText","LabelTextExpense","ModalForm","ModalWrap","SelectLabel","InputLabel","InputLabelText","ModalButtonWrap","ModalButtonAdd","ModalButtonCancel","ModalButtonClose","ModalAddTransaction","currentDate","now","setTransactionDate","setType","setCategoryId","setComment","setAmount","setChecked","fetchCategories","handleChange","evt","target","value","reset","onClose","code","currentTarget","nodeName","closeModalAddTransaction","window","addEventListener","categoriesFilter","filter","cat","size","onSubmit","preventDefault","replace","currentCategorie","Number","addTransaction","onChange","e","htmlFor","placeholder","timeFormat","newValue","moment","renderInput","params","UpDateModal","close","closeModalUpDateTransaction","newObject","upDateTransaction","transactionId","dataInfo","disabled","BlockForAddButton","setData"],"sourceRoot":""}