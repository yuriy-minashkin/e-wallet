{"version":3,"file":"static/js/691.7abae8f6.chunk.js","mappings":"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","sources":["components/ButtonAddTransactions/ButtonAddTransactions.styled.js","components/ButtonAddTransactions/ButtonAddTransactions.jsx","components/TransactionsList/TransactionsList.styled.js","components/TransactionsList/normalizedDate.js","components/TransactionsList/TransactionsList.jsx","components/HomeTab/HomeTab.styles.jsx","components/HomeTab/HomeTab.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","components/upDateModal/upDateModal.jsx","pages/HomePage/HomePage.styled.js","components/ModalConfirmation/ModalConfirmation.jsx","pages/HomePage/HomePage.jsx","redux/categories/categoriesSelectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  position: fixed;\n  /* position: absolute; */\n  bottom: 20px;\n  right: 20px;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n  @media screen and (min-width: 768px) {\n    bottom: 40px;\n    right: 40px;\n  }\n  @media screen and (min-width: 1280px) {\n    bottom: 62px;\n    right: 52px;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { openModalAddTransaction } from 'redux/global/globalSlice';\nimport { Button } from './ButtonAddTransactions.styled';\nimport { HiPlus } from 'react-icons/hi2';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button onClick={() => dispatch(openModalAddTransaction())}>\n      <HiPlus\n        style={{\n          display: 'block',\n          width: '50px',\n          height: '50px',\n          backgroundColor: '#24cca7',\n          borderRadius: '50%',\n        }}\n        color=\"white\"\n      />\n    </Button>\n  );\n};\n","import styled from 'styled-components';\n\n// import Icons from 'images/icons.svg';\n\nexport const Container = styled.div`\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n  height: 520px;\n  overflow: auto;\n`;\n\nexport const Table = styled.table``;\n\n// Head of table\n\nexport const TrHead = styled.tr`\n  background: var(--form-background-color);\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const ThDay = styled.th`\n  width: 15%;\n  text-align: left;\n  padding-left: 20px;\n  padding-top: 15px;\n  padding-bottom: 16px;\n  border-top-left-radius: 30px;\n  border-bottom-left-radius: 30px;\n`;\n\nexport const ThType = styled.th`\n  width: 10%;\n  text-align: center;\n`;\n\nexport const ThCategore = styled.th`\n  width: 15%;\n  text-align: left;\n`;\n\nexport const ThComment = styled.th`\n  width: 30%;\n  text-align: left;\n`;\n\nexport const ThCurrency = styled.th`\n  width: 10%;\n  text-align: right;\n`;\n\nexport const ThEdit = styled.th`\n  width: 5%;\n  text-align: center;\n`;\n\nexport const ThDel = styled.th`\n  width: 5%;\n  text-align: right;\n  padding-right: 30px;\n  border-top-right-radius: 30px;\n  border-bottom-right-radius: 30px;\n`;\n\n// Body of table\n\nexport const TrData = styled.tr`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  border-bottom: 1px solid #dcdcdf;\n  :not(:last-child) {\n    box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n  }\n  :last-child {\n    border-bottom: 0;\n  }\n`;\n\nexport const TdDate = styled.td`\n  padding-left: 20px;\n  padding-top: 16px;\n  padding-bottom: 14px;\n`;\n\nexport const TdType = styled.td`\n  text-align: center;\n`;\n\nexport const TdCadegory = styled.td`\n  text-align: left;\n`;\n\nexport const TdComment = styled.td`\n  text-align: left;\n`;\n\nexport const TdAmount = styled.td`\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: right;\n  color: ${props =>\n    props.type === 'INCOME'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n\nexport const TdEdit = styled.td`\n  text-align: right;\n`;\n\nexport const TdDel = styled.td`\n  text-align: left;\n`;\n\n// Buttons\n\nexport const EditButton = styled.button`\n  font-size: 16px;\n  cursor: pointer;\n  background-color: transparent;\n  padding-right: 0;\n  border: none;\n  display: flex;\n  align-items: center;\n  margin-right: 5px;\n  padding: 0 0 0 12px;\n`;\n\nexport const DelButton = styled.button`\n  min-width: 67px;\n  min-height: 26px;\n  border-radius: 18px;\n  margin-right: 12px;\n  background-color: var(--text-green-color);\n  color: var(--text-white-color);\n  border: none;\n  cursor: pointer;\n`;\n\n// Mobile\nexport const MobList = styled.ul`\n  font-size: 16px;\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n\n  width: 100%;\n  margin: 0 auto 8px;\n  background: var(--form-background-color);\n  border-radius: 10px;\n  border-left: 5px solid\n    ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;\n\nexport const MobItem = styled.li`\n  padding: 12px 20px;\n  height: 47px;\n  display: flex;\n  align-items: center;\n  &:not(:last-child) {\n    border-bottom: 1px solid #dcdcdf;\n  }\n  justify-content: space-between;\n  line-height: calc(27 / 18);\n`;\n\nexport const MobHeader = styled.span`\n  font-weight: 700;\n  font-size: 18px;\n`;\n\nexport const MobComment = styled.span`\n  width: 80px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: pre-line;\n`;\n\nexport const MobSum = styled.span`\n  color: ${props =>\n    props.type === 'income'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n","export const normalizedDate = date => {\n  const dateToString = new Date(date);\n  const day = dateToString.getDate().toString().padStart(2, '0');\n  const month = (dateToString.getMonth() + 1).toString().padStart(2, '0');\n  const year = dateToString.getFullYear().toString().slice(2);\n  return `${day}.${month}.${year}`;\n};\n","import { GrFormEdit } from 'react-icons/gr';\nimport { useMedia } from 'react-use';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectFinanceData } from 'redux/transaction/transactionSelectors';\nimport { openModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { useEffect } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { openModalConfirmation } from 'redux/global/globalSlice';\nimport {\n  Container,\n  Table,\n  TrHead,\n  ThDay,\n  ThType,\n  ThCategore,\n  ThComment,\n  ThCurrency,\n  ThEdit,\n  ThDel,\n  TrData,\n  TdDate,\n  TdType,\n  TdCadegory,\n  TdComment,\n  TdAmount,\n  TdEdit,\n  TdDel,\n  EditButton,\n  DelButton,\n  MobList,\n  MobItem,\n  MobHeader,\n  MobComment,\n  MobSum,\n} from './TransactionsList.styled';\nimport { normalizedDate } from './normalizedDate';\n\nexport const TransactionsList = ({ data, info }) => {\n  const isTablet = useMedia('(min-width: 768px)');\n  //  console.log(data);\n\n  const sortData = data.map(obj => ({\n    ...obj,\n    transactionDate: Date(obj.transactionDate),\n  }));\n   console.log(sortData);\n  const categories = useSelector(selectCategories);\n  const financeData = useSelector(selectFinanceData);\n  const [trans, setTrans] = useState('');\n  const dispatch = useDispatch();\n\n  const saveTransaction = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalUpDateTransaction());\n  };\n\n  const saveTransactionForDelete = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalConfirmation());\n  };\n\n  const takeNameCategories = id => {\n    let nameCategories = categories.find(categorie => categorie.id === id);\n    if (nameCategories) return nameCategories.name;\n  };\n\n  useEffect(() => {\n    trans && info(trans);\n    // dispatch(openModalUpDateTransaction());\n  }, [dispatch, info, trans]);\n\n  return (\n    <>\n      {!isTablet ? (\n        <>\n          {sortData.map(\n            ({ id, transactionDate, type, categoryId, comment, amount }) => (\n              <MobList key={id} type={type.toLowerCase()}>\n                <MobItem>\n                  <MobHeader>Date</MobHeader>\n                  {normalizedDate(transactionDate)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Type</MobHeader>\n                  {type.toLowerCase() === 'income' ? '+' : '-'}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Category</MobHeader>\n                  {takeNameCategories(categoryId)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Comment</MobHeader>\n                  <MobComment>{comment}</MobComment>\n                </MobItem>\n                <MobItem style={{ fontWeight: '700' }}>\n                  <MobHeader>Sum</MobHeader>\n                  <MobSum type={type.toLowerCase()}>{amount.toFixed(2)}</MobSum>\n                </MobItem>\n                <MobItem>\n                  <DelButton\n                    onClick={() => saveTransactionForDelete(id)}\n                    //  onClick={() => dispatch(deleteTransaction(id))}\n                  >\n                    Delete\n                  </DelButton>\n                  <EditButton onClick={() => saveTransaction(id)}>\n                    <GrFormEdit\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        width: '30px',\n                        height: '30px',\n                      }}\n                    />\n                    Edit\n                  </EditButton>\n                </MobItem>\n              </MobList>\n            )\n          )}\n        </>\n      ) : (\n        //desctop\n        <Container>\n          <Table>\n            <thead>\n              <TrHead>\n                <ThDay>Date</ThDay>\n                <ThType>Type</ThType>\n                <ThCategore>Cotegory</ThCategore>\n                <ThComment>Comment</ThComment>\n                <ThCurrency>Currency</ThCurrency>\n                <ThEdit></ThEdit>\n                <ThDel></ThDel>\n              </TrHead>\n            </thead>\n            <tbody>\n              {sortData.map(\n                ({\n                  id,\n                  transactionDate,\n                  type,\n                  categoryId,\n                  comment,\n                  amount,\n                }) => (\n                  <TrData key={id}>\n                    <TdDate>{normalizedDate(transactionDate)}</TdDate>\n                    <TdType>\n                      {type.toLowerCase() === 'income' ? '+' : '-'}\n                    </TdType>\n                    <TdCadegory>{takeNameCategories(categoryId)}</TdCadegory>\n                    <TdComment>{comment}</TdComment>\n                    <TdAmount type={type}>{amount.toFixed(2)}</TdAmount>\n                    <TdEdit>\n                      <EditButton onClick={() => saveTransaction(id)}>\n                        <GrFormEdit\n                          style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            width: '30px',\n                            height: '30px',\n                          }}\n                        />\n                      </EditButton>\n                    </TdEdit>\n                    <TdDel>\n                      <DelButton\n                        onClick={() => saveTransactionForDelete(id)}\n                        // onClick={() => dispatch(deleteTransaction(id))}\n                      >\n                        Delete\n                      </DelButton>\n                    </TdDel>\n                  </TrData>\n                )\n              )}\n            </tbody>\n          </Table>\n        </Container>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0;\n  width: 100%;\n  /* min-height: 100vh; */\n  /* display: flex;\n  flex-direction: column; */\n  @media screen and (min-width: 480px) {\n    width: 440px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 704px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 784px;\n    padding: 46px 0 0 69px;\n  }\n`;\n","import { TransactionsList } from 'components/TransactionsList/TransactionsList';\nimport {\n  selectFinanceData,\n  selectIsLoading,\n} from 'redux/transaction/transactionSelectors';\nimport { useSelector } from 'react-redux';\nimport { fetchAllTransactions } from 'redux/transaction/transactionOperations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Rings } from 'react-loader-spinner';\nimport { Container } from './HomeTab.styles';\n\nexport const HomeTab = props => {\n  const financeData = useSelector(selectFinanceData);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const compareData = financeData.map(obj => ({\n    ...obj,\n    transactionDate: Date.parse(obj.transactionDate),\n  }));\n  const sortDate = [...compareData].sort(\n    (a, b) => b.transactionDate - a.transactionDate\n  );\n\n  // console.log(sortDate);\n\n  useEffect(() => {\n    dispatch(fetchAllTransactions());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {financeData.length === 0 ? (\n        <p> You don't have transactions yet. </p>\n      ) : (\n        <div>\n          {isLoading ? (\n            <Rings />\n          ) : (\n            <>\n              <TransactionsList data={sortDate} info={props.info} />\n            </>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n","import { useState } from 'react';\nimport {\n  CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  LabelTextExpense,\n} from './ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModalAddTransaction } from 'redux/global/globalSlice';\nimport { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { useEffect } from 'react';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\n\n// import { TextField } from '@mui/material';\n\nimport { IoCloseOutline } from 'react-icons/io5';\n\nimport { IconContext } from 'react-icons';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\n\nexport const ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const currentDate = new Date(Date.now());\n\n  const [transactionDate, setTransactionDate] = useState(currentDate);\n  const [, setType] = useState('');\n  const [categoryId, setCategoryId] = useState('');\n  const [comment, setComment] = useState('');\n  const [amount, setAmount] = useState('');\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      setCategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    // const date = new Date(\n    //   transactionDate.toString().replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1')\n    // );\n\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n\n    const obj = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n    console.log(obj);\n\n    dispatch(addTransaction(obj));\n    reset();\n  };\n\n  const reset = () => {\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalAddTransaction());\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n\n  return (\n    <Overlay onClick={onClose}>\n      <Modal>\n        <ModalButtonClose type=\"button\" onClick={onClose}>\n          <IconContext.Provider value={{ size: '3em' }}>\n            <h3>\n              {' '}\n              <IoCloseOutline />{' '}\n            </h3>\n          </IconContext.Provider>\n        </ModalButtonClose>\n        <ModalForm onSubmit={handleSubmit}>\n          <ModalTitle> Add transaction</ModalTitle>\n\n          <Input\n            onChange={onChange}\n            checked={checked}\n            type=\"checkbox\"\n            name=\"topic\"\n            id=\"topic-1\"\n          />\n\n          <ModalWrap>\n            <LabelText checked={checked}>Income</LabelText>\n            <CheckboxLabel htmlFor=\"topic-1\" checked={checked}></CheckboxLabel>\n            <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n          </ModalWrap>\n\n          {checked && (\n            <SelectLabel\n              name=\"categoryId\"\n              onChange={handleChange}\n              value={categoryId}\n            >\n              {categories &&\n                categoriesFilter.map(({ id, name }) => {\n                  return (\n                    <option key={id} id={id}>\n                      {name}\n                    </option>\n                  );\n                })}\n            </SelectLabel>\n          )}\n\n          <ModalWrap>\n            <InputLabel\n              value={amount}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"0.00\"\n            />\n            <Datetime\n              timeFormat={false}\n              name={transactionDate}\n              value={transactionDate}\n              onChange={newValue => {\n                setTransactionDate(moment(newValue).toISOString());\n              }}\n              renderInput={params => <InputLabel {...params} />}\n            />\n          </ModalWrap>\n          <InputLabelText\n            value={comment}\n            onChange={handleChange}\n            name=\"comment\"\n            placeholder=\"Comment\"\n          />\n\n          <ModalButtonWrap>\n            <ModalButtonAdd type=\"submit\">Add</ModalButtonAdd>\n            <ModalButtonCancel type=\"button\" onClick={onClose}>\n              Cancel\n            </ModalButtonCancel>\n          </ModalButtonWrap>\n        </ModalForm>\n      </Modal>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport {\n  // CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  CheckboxLabel,\n  LabelTextExpense,\n  // Input,\n  // LabelText,\n  // LabelTextExpense,\n} from '../ModalAddTransaction/ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { closeModalAddTransaction } from 'redux/global/globalSlice';\n// import { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n// import { useEffect } from 'react';\n// import Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n// import moment from 'moment';\n// import { TextField } from '@mui/material';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\nimport { closeModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { upDateTransaction } from 'redux/transaction/transactionOperations';\n// import { ModalButtonCancel } from 'components/ModalAddTransaction/ModalAddTransaction.styled';\n\nexport const UpDateModal = ({ trans, close }) => {\n  const findcategorie = useSelector(selectCategories);\n\n  const [categoryId, setCategoryId] = useState(trans.categoryId);\n  const [amount, setAmount] = useState(Math.abs(trans.amount));\n  const [transactionDate, setTransactionDate] = useState(trans.transactionDate);\n  const [comment, setComment] = useState(trans.comment);\n  const [, setType] = useState(trans.type);\n  const [checked, setChecked] = useState(\n    trans.type === 'INCOME' ? false : true\n  );\n\n  console.log('categoryId init', categoryId);\n\n  const findcategoryId = name => {\n    // console.log('findcategorie', findcategorie);\n    // console.log('name', name);\n    // console.log('categoryId before', categoryId);\n    const CategoryId = findcategorie.find(tran => tran.name === name);\n    setCategoryId(CategoryId.id);\n  //   console.log('CategoryId', CategoryId);\n  //   console.log('categoryId in state', categoryId);\n  };\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newObject = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked ? categories[10].id : categoryId,\n      comment,\n      amount: !checked ? Number(amount) : -Number(Math.abs(amount)),\n    };\n    console.log(newObject);\n\n    dispatch(\n      upDateTransaction({ transactionId: trans.id, dataInfo: newObject })\n    );\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      findcategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalUpDateTransaction());\n      close(null);\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  const xxx = [...categoriesFilter].sort(function (x, y) {\n    return x.id === categoryId ? -1 : y.id === categoryId ? 1 : 0;\n  });\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <Modal>\n          <ModalButtonClose type=\"button\" onClick={onClose}>\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n          <ModalForm onSubmit={handleSubmit}>\n            <ModalTitle> Update transaction</ModalTitle>\n            <Input\n              onChange={onChange}\n              checked={checked}\n              type=\"checkbox\"\n              name=\"topic\"\n              id=\"topic-1\"\n            />\n            <ModalWrap>\n              <LabelText checked={checked}>Income</LabelText>\n              <CheckboxLabel\n                htmlFor=\"topic-1\"\n                checked={checked}\n              ></CheckboxLabel>\n              <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n            </ModalWrap>\n\n            {checked && (\n              <SelectLabel\n                name=\"categoryId\"\n                onChange={handleChange}\n                value={categoryId}\n              >\n                {categories &&\n                  xxx.map(({ id, name }) => {\n                    return (\n                      <option key={id} id={id}>\n                        {name}\n                      </option>\n                    );\n                  })}\n              </SelectLabel>\n            )}\n\n            <ModalWrap>\n              <InputLabel\n                value={amount}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                placeholder=\"0.00\"\n              />\n              {/* <Datetime\n                timeFormat={false}\n                name={transactionDate}\n                value={transactionDate}\n                renderInput={params => <InputLabel {...params} />}\n              /> */}\n              <InputLabel\n                value={transactionDate}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                disabled\n              />\n            </ModalWrap>\n            <InputLabelText\n              value={comment}\n              onChange={handleChange}\n              name=\"comment\"\n              placeholder=\"Comment\"\n            />\n\n            <ModalButtonWrap>\n              <ModalButtonAdd type=\"submit\">upDate</ModalButtonAdd>\n              <ModalButtonCancel type=\"button\" onClick={onClose}>\n                Cancel\n              </ModalButtonCancel>\n            </ModalButtonWrap>\n          </ModalForm>\n        </Modal>\n      </Overlay>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const BlockForAddButton = styled.div`\nposition: relative;\n`","import {\n  ModalButtonClose,\n  Overlay,\n} from 'components/ModalAddTransaction/ModalAddTransaction.styled';\nimport { IconContext } from 'react-icons';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { useDispatch } from 'react-redux';\nimport { closeModalConfirmation } from 'redux/global/globalSlice';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport {\n  ModalBtnCancel,\n  ModalButtonWrapper,\n  ModalButtonYes,\n  ModalConfirmationText,\n  ModalConfirmationTitle,\n  ModalContainer,\n} from './ModalConfirmation.styled';\n\nexport const ModalConfirmation = ({transId}) => {\n  console.log(transId);\n  const dispatch = useDispatch();\n\n  \n\n  const onClose = evt => {\n    if (evt.code === 'Escape' || evt.currentTarget === evt.target) {\n      dispatch(closeModalConfirmation());\n    }\n  };\n\n\n\n  window.addEventListener('keydown', onClose);\n\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <ModalContainer>\n          <ModalButtonClose\n            type=\"button\"\n            onClick={() => dispatch(closeModalConfirmation())}\n          >\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n\n          <ModalConfirmationTitle>Confirmation</ModalConfirmationTitle>\n          <ModalConfirmationText>\n            Are you sure you want this?\n          </ModalConfirmationText>\n\n          <ModalButtonWrapper>\n            <ModalBtnCancel\n              type=\"button\"\n              onClick={() => dispatch(closeModalConfirmation())}\n            >\n              Cancel\n            </ModalBtnCancel>\n            <ModalButtonYes\n              type=\"button\"\n              \n              onClick={()=>dispatch(deleteTransaction(transId.id))}\n            >\n              Yes, I'm sure!\n            </ModalButtonYes>\n          </ModalButtonWrapper>\n        </ModalContainer>\n      </Overlay>\n    </>\n  );\n};\n","import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport {\n  selectAddTransactionOpen,\n  selectUpDateTransactionsModal,\n  selectModalConfirmation,\n} from 'redux/global/globalSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useEffect } from 'react';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { useState } from 'react';\nimport { useMedia } from 'react-use';\nimport { UpDateModal } from 'components/upDateModal/upDateModal';\nimport { BlockForAddButton } from './HomePage.styled';\nimport { ModalConfirmation } from 'components/ModalConfirmation/ModalConfirmation';\nimport { Balance } from 'components/Balance/Balance';\nconst HomePage = () => {\n  const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n  const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n  const isModalConfirmations = useSelector(selectModalConfirmation);\n  console.log(isModalAddTransactionOpen);\n  console.log(isModalUpDateTransaction);\n  console.log(isModalConfirmations);\n  const dispatch = useDispatch();\n  const isTablet = useMedia('(min-width: 768px)');\n\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {!isTablet && <Balance />}\n      <BlockForAddButton>\n      <HomeTab info={setData} />\n      <ButtonAddTransactions />\n      {isModalConfirmations && data && (\n        <ModalConfirmation transId={data} />\n      )}\n      {isModalUpDateTransaction && data && (\n        <UpDateModal trans={data} close={setData} />\n      )}\n      {isModalAddTransactionOpen && <ModalAddTransaction />}\n    </BlockForAddButton>\n    </div>\n  );\n};\n\nexport default HomePage;\n\n\n\n// import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\n// import { HomeTab } from 'components/HomeTab/HomeTab';\n// import {\n//   selectAddTransactionOpen,\n//   selectUpDateTransactionsModal,\n//   selectModalConfirmation,\n// } from 'redux/global/globalSelectors';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\n// import { useEffect } from 'react';\n// import { fetchCategories } from 'redux/categories/categoriesOperations';\n// import { useState } from 'react';\n// import { UpDateModal } from 'components/upDateModal/upDateModal';\n// import { BlockForAddButton } from './HomePage.styled';\n// import { ModalConfirmation } from 'components/ModalConfirmation/ModalConfirmation';\n\n// const HomePage = () => {\n//   const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n//   const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n//   const isModalConfirmations = useSelector(selectModalConfirmation);\n//   console.log(isModalAddTransactionOpen);\n//   console.log(isModalUpDateTransaction);\n//   console.log(isModalConfirmations);\n//   const dispatch = useDispatch();\n\n//   const [data, setData] = useState(null);\n\n//   useEffect(() => {\n//     dispatch(fetchCategories());\n//   }, [dispatch]);\n\n//   return (\n//     <BlockForAddButton>\n//       <HomeTab info={setData} />\n//       <ButtonAddTransactions />\n//       {isModalConfirmations && data && (\n//         <ModalConfirmation transId={data} />\n//       )}\n//       {isModalUpDateTransaction && data && (\n//         <UpDateModal trans={data} close={setData} />\n//       )}\n//       {isModalAddTransactionOpen && <ModalAddTransaction />}\n//     </BlockForAddButton>\n//   );\n// };\n\n// export default HomePage;\n","export const selectCategories = state=>state.categories.categories;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n"],"names":["Button","styled","ButtonAddTransactions","dispatch","useDispatch","onClick","openModalAddTransaction","style","display","width","height","backgroundColor","borderRadius","color","Container","Table","TrHead","ThDay","ThType","ThCategore","ThComment","ThCurrency","ThEdit","ThDel","TrData","TdDate","TdType","TdCadegory","TdComment","TdAmount","props","type","TdEdit","TdDel","EditButton","DelButton","MobList","MobItem","MobHeader","MobComment","MobSum","normalizedDate","date","dateToString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","TransactionsList","data","info","isTablet","useMedia","sortData","map","obj","transactionDate","console","log","categories","useSelector","selectCategories","financeData","selectFinanceData","useState","trans","setTrans","saveTransaction","id","find","openModalUpDateTransaction","saveTransactionForDelete","openModalConfirmation","takeNameCategories","nameCategories","categorie","name","useEffect","categoryId","comment","amount","toLowerCase","toFixed","alignItems","fontWeight","HomeTab","isLoading","selectIsLoading","compareData","parse","sortDate","sort","a","b","fetchAllTransactions","length","ModalAddTransaction","currentDate","now","setTransactionDate","setType","setCategoryId","setComment","setAmount","checked","setChecked","fetchCategories","handleChange","evt","target","value","reset","onClose","code","currentTarget","nodeName","closeModalAddTransaction","window","addEventListener","categoriesFilter","filter","cat","size","onSubmit","preventDefault","currentCategorie","Number","addTransaction","onChange","e","htmlFor","placeholder","timeFormat","newValue","moment","toISOString","renderInput","params","UpDateModal","close","findcategorie","Math","abs","CategoryId","tran","findcategoryId","closeModalUpDateTransaction","xxx","x","y","newObject","upDateTransaction","transactionId","dataInfo","disabled","BlockForAddButton","ModalConfirmation","transId","closeModalConfirmation","deleteTransaction","isModalAddTransactionOpen","selectAddTransactionOpen","isModalUpDateTransaction","selectUpDateTransactionsModal","isModalConfirmations","selectModalConfirmation","setData","Balance","state"],"sourceRoot":""}