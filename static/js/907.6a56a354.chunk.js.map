{"version":3,"file":"static/js/907.6a56a354.chunk.js","mappings":"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","sources":["components/ButtonAddTransactions/ButtonAddTransactions.styled.js","components/ButtonAddTransactions/ButtonAddTransactions.jsx","redux/transaction/transactionSelectors.js","redux/categories/categoriesSelectors.js","components/TransactionsList/TransactionsList.jsx","components/HomeTab/HomeTab.jsx","redux/global/globalSelectors.js","components/ModalAddTransaction/ModalAddTransaction.styled.js","components/ModalAddTransaction/ModalAddTransaction.jsx","components/upDateModal/upDateModal.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  display: block;\n  width: 50px;\n  height: 50px;\n  position: absolute;\n  top: 85%;\n  left: 100%;\n`;","import { useDispatch } from 'react-redux';\nimport { openModalAddTransaction } from 'redux/global/globalSlice';\nimport { Button } from './ButtonAddTransactions.styled';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button onClick={() => dispatch(openModalAddTransaction())}>Add</Button>\n  );\n};\n","export const selectFinanceData = state => state.transactions.finance.data;\nexport const selectIsLoading = state => state.transactions.isLoading;\nexport const selectTotalBalance = state => state.transactions.totalBalance;\nexport const selectError = state => state.transactions.error;\n","export const selectCategories = state=>state.categories.categories;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","import { GrFormEdit } from 'react-icons/gr';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectFinanceData } from 'redux/transaction/transactionSelectors';\nimport { openModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { useEffect } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n\nexport const TransactionsList = ({ data, info }) => {\n  //  console.log(data);\n\n  const sortData = data.map(obj => ({\n    ...obj,\n    transactionDate: new Date(obj.transactionDate).toISOString().substr(0, 10),\n  }));\n  // console.log(sortData);\n  const categories = useSelector(selectCategories);\n  const financeData = useSelector(selectFinanceData);\n  const [trans, setTrans] = useState('');\n  const dispatch = useDispatch();\n  const saveTransaction = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n  };\n\n  const takeNameCategories = id => {\n    let nameCategories = categories.find(categorie => categorie.id === id);\n    if (nameCategories) return nameCategories.name;\n  };\n\n  useEffect(() => {\n    console.log('trans', trans);\n    trans && info(trans);\n    dispatch(openModalUpDateTransaction());\n  }, [dispatch, info, trans]);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Day</th>\n          <th>Type</th>\n          <th>Cotegory</th>\n          <th>Comment</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        {sortData.map(\n          ({ id, transactionDate, type, categoryId, comment, amount }) => (\n            <tr key={id}>\n              <td>{transactionDate}</td>\n              <td>{type.toLowerCase()}</td>\n              <td>{takeNameCategories(categoryId)}</td>\n              <td>{comment}</td>\n              <td>{amount}</td>\n              <td>\n                {' '}\n                <button onClick={() => saveTransaction(id)}>\n                  <GrFormEdit />\n                </button>\n              </td>\n              <td>\n                <button onClick={() => dispatch(deleteTransaction(id))}>\n                  Delete\n                </button>\n              </td>\n            </tr>\n          )\n        )}\n      </tbody>\n    </table>\n  );\n};\n","import { TransactionsList } from 'components/TransactionsList/TransactionsList';\nimport {\n  selectFinanceData,\n  selectIsLoading,\n} from 'redux/transaction/transactionSelectors';\nimport { useSelector } from 'react-redux';\nimport { fetchAllTransactions } from 'redux/transaction/transactionOperations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Rings } from 'react-loader-spinner';\n\nexport const HomeTab = props => {\n  const financeData = useSelector(selectFinanceData);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const compareData = financeData.map(obj => ({\n    ...obj,\n    transactionDate: Date.parse(obj.transactionDate),\n  }));\n  const sortDate = [...compareData].sort(\n    (a, b) => a.transactionDate - b.transactionDate\n  );\n\n  // console.log(sortDate);\n\n  useEffect(() => {\n    dispatch(fetchAllTransactions());\n  }, [dispatch]);\n\n  return (\n    <>\n      {financeData.length === 0 ? (\n        <p> You don't have transactions yet. </p>\n      ) : (\n        <div>\n          {isLoading ? (\n            <Rings />\n          ) : (\n            <>\n              <TransactionsList data={sortDate} info={props.info} />\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","export const selectAddTransactionOpen = state=>state.global.isModalAddTransactionOpen;\nexport const selectUpDateTransactionsModal = state =>\n  state.global.isModalUpDateTransaction;","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.25);\n  z-index: 1200;\n`;\n\nexport const Modal = styled.div`\n  max-width: 540px;\n  width: 100%;\n  height: 580px;\n  padding: 40px 73px 64px 40px;\n  background-color: #ffffff;\n  border-radius: 20px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  /* gap: 40px; */\n  position: relative;\n  z-index: 1200;\n`;\n\nexport const ModalTitle = styled.p`\n  font-family: 'Poppins';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 30px;\n  line-height: 45px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  margin-bottom: 42px;\n  color: #000000;\n`;\n\n// export const CheckboxInput = styled.input`\n// display: flex;\n//      gap: 9px;\n//      margin-top: 25px;\n//      align-items: center;\n//      justify-content: center;\n\n// `\n// ;\n\nexport const CheckboxLabel = styled.label`\n  &::before {\n    content: '';\n\n    width: 80px;\n    height: 40px;\n    background-color: #ffffff;\n    border: 1px solid #e0e0e0;\n    border-radius: 30px;\n    transition: box-shadow 250ms linear;\n\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n    padding-bottom: 8px;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 195px;\n    top: 139px;\n    width: 44px;\n    height: 44px;\n    background-color: #24cca7;\n    border-radius: 50px;\n    box-shadow: 0px 6px 15px rgba(36, 204, 167, 0.5);\n    transition: transform 250ms linear, background-color 250ms linear,\n      box-shadow 250ms linear;\n\n    text-align: center;\n    font-size: 10px;\n    font-weight: 500;\n    line-height: 2.8;\n    padding-top: 8px;\n\n    transform: ${props => props.checked && 'translate(42px)'};\n    background-color: ${props => (props.checked ? '#FF6596' : '#24CCA7')};\n  }\n`;\n\nexport const Input = styled.input`\n  opacity: 0;\n  pointer-events: none;\n  visibility: hidden;\n`;\n\n\nexport const LabelText = styled.span`\ncolor: ${props => (props.checked ? `#E0E0E0` : '#24CCA7')};\n`;\nexport const LabelTextExpense = styled.span`\ncolor: ${props => (props.checked ? `#FF6596` : '#E0E0E0')};\n`;\n\n\nexport const ModalForm = styled.form`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const ModalWrap = styled.div`\n  display: flex;\n  gap: 32px;\n  align-items: center;\n  justify-content: center;\n  /* margin-right: 32px; */\n  margin-bottom: 44px;\n`;\n\nexport const SelectLabel = styled.select`\n  width: 394px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  margin-bottom: 40px;\n`;\n\nexport const InputLabel = styled.input`\n  width: 190px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  text-align: center;\n \n`;\n\nexport const InputLabelText = styled.input`\n  width: 394px;\n  border: none;\n  border-bottom: 1px solid #e0e0e0;\n  margin-bottom: 40px;\n`;\n\nexport const ModalButtonWrap = styled.div`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const ModalButtonAdd = styled.button`\n  width: 300px;\n  padding: 13px 65px 13px 71px;\n  border: none;\n  background-color: #24cca7;\n  border-radius: 20px;\n  color: #ffffff;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  text-align: center;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n`;\n\nexport const ModalButtonCancel = styled.button`\n  width: 300px;\n  padding: 13px 65px 13px 71px;\n  border: none;\n  background-color: #ffffff;\n  border: 1px solid #4a56e2;\n  border-radius: 20px;\n\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 27px;\n  text-align: center;\n  letter-spacing: 0.1em;\n  text-transform: uppercase;\n  color: #4a56e2;\n`;\n\nexport const ModalButtonClose = styled.button`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  border: none;\n  background-color: #fff;\n  outline: blue;\n  padding: 0;\n  cursor: pointer;\n\n  &:hover {\n    /* background-color: red; */\n  }\n`;\n\n","import { useState } from 'react';\nimport {\n  CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  LabelTextExpense,\n} from './ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModalAddTransaction } from 'redux/global/globalSlice';\nimport { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { useEffect } from 'react';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\n\n// import { TextField } from '@mui/material';\n\nimport { IoCloseOutline } from 'react-icons/io5';\n\nimport { IconContext } from 'react-icons';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\n\nexport const ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const currentDate = new Date(Date.now());\n\n  const [transactionDate, setTransactionDate] = useState(currentDate);\n  const [, setType] = useState('');\n  const [categoryId, setCategoryId] = useState('');\n  const [comment, setComment] = useState('');\n  const [amount, setAmount] = useState('');\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      setCategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const date = new Date(\n      transactionDate.toString().replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1')\n    );\n\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n\n    const obj = {\n      transactionDate: date,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n    console.log(obj);\n\n    dispatch(addTransaction(obj));\n    reset();\n  };\n\n  const reset = () => {\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalAddTransaction());\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n\n  return (\n    <Overlay onClick={onClose}>\n      <Modal>\n        <ModalButtonClose type=\"button\" onClick={onClose}>\n          <IconContext.Provider value={{ size: '3em' }}>\n            <h3>\n              {' '}\n              <IoCloseOutline />{' '}\n            </h3>\n          </IconContext.Provider>\n        </ModalButtonClose>\n        <ModalForm onSubmit={handleSubmit}>\n          <ModalTitle> Add transaction</ModalTitle>\n\n          <Input\n            onChange={onChange}\n            checked={checked}\n            type=\"checkbox\"\n            name=\"topic\"\n            id=\"topic-1\"\n          />\n\n          <ModalWrap>\n            <LabelText checked={checked}>Income</LabelText>\n            <CheckboxLabel htmlFor=\"topic-1\" checked={checked}></CheckboxLabel>\n            <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n          </ModalWrap>\n\n          {checked && (\n            <SelectLabel\n              name=\"categoryId\"\n              onChange={handleChange}\n              value={categoryId}\n            >\n              {categories &&\n                categoriesFilter.map(({ id, name }) => {\n                  return (\n                    <option key={id} id={id}>\n                      {name}\n                    </option>\n                  );\n                })}\n            </SelectLabel>\n          )}\n\n          <ModalWrap>\n            <InputLabel\n              value={amount}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"0.00\"\n            />\n            <Datetime\n              timeFormat={false}\n              name={transactionDate}\n              value={transactionDate}\n              onChange={newValue => {\n                setTransactionDate(moment(newValue).toISOString());\n              }}\n              renderInput={params => <InputLabel {...params} />}\n            />\n          </ModalWrap>\n          <InputLabelText\n            value={comment}\n            onChange={handleChange}\n            name=\"comment\"\n            placeholder=\"Comment\"\n          />\n\n          <ModalButtonWrap>\n            <ModalButtonAdd type=\"submit\">Add</ModalButtonAdd>\n            <ModalButtonCancel type=\"button\" onClick={onClose}>\n              Cancel\n            </ModalButtonCancel>\n          </ModalButtonWrap>\n        </ModalForm>\n      </Modal>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport {\n  // CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  CheckboxLabel,\n  LabelTextExpense,\n  // Input,\n  // LabelText,\n  // LabelTextExpense,\n} from '../ModalAddTransaction/ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { closeModalAddTransaction } from 'redux/global/globalSlice';\n// import { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n// import { useEffect } from 'react';\n// import Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n// import moment from 'moment';\n// import { TextField } from '@mui/material';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\n\nimport { closeModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { upDateTransaction } from 'redux/transaction/transactionOperations';\n// import { ModalButtonCancel } from 'components/ModalAddTransaction/ModalAddTransaction.styled';\n\nexport const UpDateModal = ({ trans, close }) => {\n\n  const [categoryId, setCategoryId] = useState(trans.categoryId);\n  const [amount, setAmount] = useState(trans.amount);\n  const [transactionDate, setTransactionDate] = useState(trans.transactionDate);\n  const [comment, setComment] = useState(trans.comment);\n  const [, setType] = useState(trans.type);\n  const [checked, setChecked] = useState(trans.type === 'INCOME'? false:true);\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n\n\n  const handleSubmit = evt => {\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n    evt.preventDefault();\n    const newObject = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n\n    dispatch(\n      upDateTransaction({ transactionId:trans.id, dataInfo: newObject })\n    );\n      setTransactionDate('');\n      setType('');\n      setCategoryId('');\n      setComment('');\n      setAmount('');\n  };\n\n\n  const handleChange = evt => {\n    // console.log(evt.target);\n    const { value, name } = evt.target;\n       if (name === 'categoryId') {\n         setCategoryId(value);\n       } else if (name === 'amount') {\n         setAmount(value);\n       } else if (name === 'comment') {\n         setComment(value);\n       }\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalUpDateTransaction());\n\n      close('');\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n   const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <Modal>\n          <ModalButtonClose type=\"button\" onClick={onClose}>\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n          <ModalForm onSubmit={handleSubmit}>\n            <ModalTitle> Update transaction</ModalTitle>\n            <Input\n              onChange={onChange}\n              checked={checked}\n              type=\"checkbox\"\n              name=\"topic\"\n              id=\"topic-1\"\n            />\n            <ModalWrap>\n              <LabelText checked={checked}>Income</LabelText>\n              <CheckboxLabel\n                htmlFor=\"topic-1\"\n                checked={checked}\n              ></CheckboxLabel>\n              <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n            </ModalWrap>\n\n            {checked && (\n              <SelectLabel\n                name=\"categoryId\"\n                onChange={handleChange}\n                value={categoryId}\n              >\n                {categories &&\n                  categoriesFilter.map(({ id, name }) => {\n                    return (\n                      <option key={id} id={id}>\n                        {name}\n                      </option>\n                    );\n                  })}\n              </SelectLabel>\n            )}\n\n            <ModalWrap>\n              <InputLabel\n                value={amount}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                placeholder=\"0.00\"\n              />\n              {/* <Datetime\n                timeFormat={false}\n                name={transactionDate}\n                value={transactionDate}\n                renderInput={params => <InputLabel {...params} />}\n              /> */}\n              <InputLabel\n                value={transactionDate}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                disabled\n              />\n            </ModalWrap>\n            <InputLabelText\n              value={comment}\n              onChange={handleChange}\n              name=\"comment\"\n              placeholder=\"Comment\"\n            />\n\n            <ModalButtonWrap>\n              <ModalButtonAdd type=\"submit\">upDate</ModalButtonAdd>\n              <ModalButtonCancel type=\"button\" onClick={onClose}>\n                Cancel\n              </ModalButtonCancel>\n            </ModalButtonWrap>\n          </ModalForm>\n        </Modal>\n      </Overlay>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const BlockForAddButton = styled.div`\nposition: relative;\n`","import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport {\n  selectAddTransactionOpen,\n  selectUpDateTransactionsModal,\n} from 'redux/global/globalSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useEffect } from 'react';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { useState } from 'react';\nimport { UpDateModal } from 'components/upDateModal/upDateModal';\nimport { BlockForAddButton } from './HomePage.styled';\n\nconst HomePage = () => {\n  const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n  const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n  const dispatch = useDispatch();\n\n  const [data,setData]= useState(null)\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n \n\n  return (\n    <BlockForAddButton>\n      <HomeTab info={setData} />\n      <ButtonAddTransactions />\n      {isModalUpDateTransaction && data && <UpDateModal trans={data} close={setData}/>}\n      {isModalAddTransactionOpen && <ModalAddTransaction />}\n    </BlockForAddButton>\n  );\n};\n\nexport default HomePage;\n"],"names":["Button","styled","ButtonAddTransactions","dispatch","useDispatch","onClick","openModalAddTransaction","selectFinanceData","state","transactions","finance","data","selectIsLoading","isLoading","selectCategories","categories","TransactionsList","info","sortData","map","obj","transactionDate","Date","toISOString","substr","useSelector","financeData","useState","trans","setTrans","takeNameCategories","id","nameCategories","find","categorie","name","useEffect","console","log","openModalUpDateTransaction","type","categoryId","comment","amount","toLowerCase","saveTransaction","deleteTransaction","HomeTab","props","compareData","parse","sortDate","sort","a","b","fetchAllTransactions","length","selectAddTransactionOpen","global","isModalAddTransactionOpen","selectUpDateTransactionsModal","isModalUpDateTransaction","Overlay","Modal","ModalTitle","CheckboxLabel","checked","Input","LabelText","LabelTextExpense","ModalForm","ModalWrap","SelectLabel","InputLabel","InputLabelText","ModalButtonWrap","ModalButtonAdd","ModalButtonCancel","ModalButtonClose","ModalAddTransaction","currentDate","now","setTransactionDate","setType","setCategoryId","setComment","setAmount","setChecked","fetchCategories","handleChange","evt","target","value","reset","onClose","code","currentTarget","nodeName","closeModalAddTransaction","window","addEventListener","categoriesFilter","filter","cat","size","onSubmit","preventDefault","date","toString","replace","currentCategorie","Number","addTransaction","onChange","e","htmlFor","placeholder","timeFormat","newValue","moment","renderInput","params","UpDateModal","close","closeModalUpDateTransaction","newObject","upDateTransaction","transactionId","dataInfo","disabled","BlockForAddButton","setData"],"sourceRoot":""}