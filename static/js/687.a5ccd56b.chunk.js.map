{"version":3,"file":"static/js/687.a5ccd56b.chunk.js","mappings":"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","sources":["components/ButtonAddTransactions/ButtonAddTransactions.styled.js","components/ButtonAddTransactions/ButtonAddTransactions.jsx","redux/transaction/transactionSelectors.js","redux/categories/categoriesSelectors.js","components/TransactionsList/TransactionsList.styled.js","components/TransactionsList/normalizedDate.js","components/TransactionsList/TransactionsList.jsx","components/HomeTab/HomeTab.styles.jsx","components/HomeTab/HomeTab.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","components/upDateModal/upDateModal.jsx","pages/HomePage/HomePage.styled.js","components/ModalConfirmation/ModalConfirmation.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: block;\n  position: absolute;\n  top: 87%;\n  left: 91%;\n  background-color: transparent;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { openModalAddTransaction } from 'redux/global/globalSlice';\nimport { Button } from './ButtonAddTransactions.styled';\nimport { HiPlus } from 'react-icons/hi2';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Button onClick={() => dispatch(openModalAddTransaction())}>\n      <HiPlus\n        style={{\n          display: 'block',\n          width: '50px',\n          height: '50px',\n          backgroundColor: '#24cca7',\n          borderRadius: '50%',\n        }}\n        color=\"white\"\n      />\n    </Button>\n  );\n};\n","export const selectFinanceData = state => state.transactions.finance.data;\nexport const selectIsLoading = state => state.transactions.isLoading;\nexport const selectTotalBalance = state => state.transactions.totalBalance;\nexport const selectError = state => state.transactions.error;\n","export const selectCategories = state=>state.categories.categories;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","import styled from 'styled-components';\n\n// import Icons from 'images/icons.svg';\n\nexport const Container = styled.div`\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n  height: 520px;\n  overflow: auto;\n`;\n\nexport const Table = styled.table`\n`;\n\n// Head of table\n\nexport const TrHead = styled.tr`\n  background: var(--form-background-color);\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const ThDay = styled.th`\n  width: 15%;\n  text-align: left;\n  padding-left: 20px;\n  padding-top: 15px;\n  padding-bottom: 16px;\n  border-top-left-radius: 30px;\n  border-bottom-left-radius: 30px;\n`;\n\nexport const ThType = styled.th`\n  width: 10%;\n  text-align: center;\n`;\n\nexport const ThCategore = styled.th`\n  width: 15%;\n  text-align: left;\n`;\n\nexport const ThComment = styled.th`\n  width: 30%;\n  text-align: left;\n`;\n\nexport const ThCurrency = styled.th`\n  width: 10%;\n  text-align: right;\n`;\n\nexport const ThEdit = styled.th`\n  width: 5%;\n  text-align: center;\n`;\n\nexport const ThDel = styled.th`\n  width: 5%;\n  text-align: right;\n  padding-right: 30px;\n  border-top-right-radius: 30px;\n  border-bottom-right-radius: 30px;\n`;\n\n// Body of table\n\nexport const TrData = styled.tr`\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  border-bottom: 1px solid #dcdcdf;\n  :not(:last-child) {\n    box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n  }\n  :last-child {\n    border-bottom: 0;\n  }\n`;\n\nexport const TdDate = styled.td`\n  padding-left: 20px;\n  padding-top: 16px;\n  padding-bottom: 14px;\n`;\n\nexport const TdType = styled.td`\n  text-align: center;\n`;\n\nexport const TdCadegory = styled.td`\n  text-align: left;\n`;\n\nexport const TdComment = styled.td`\n  text-align: left;\n`;\n\nexport const TdAmount = styled.td`\n  font-weight: 700;\n  line-height: 1.5;\n  text-align: right;\n  color: ${props =>\n    props.type === 'INCOME'\n      ? 'var(--text-green-color)'\n      : 'var(--text-pink-color)'};\n`;\n\nexport const TdEdit = styled.td`\n  text-align: right;\n`;\n\nexport const TdDel = styled.td`\n  text-align: left;\n`;\n\n// Buttons\n\nexport const EditButton = styled.button`\n  font-size: 16px;\n  cursor: pointer;\n  background-color: transparent;\n  padding-right: 0;\n  border: none;\n  display: flex;\n  align-items: center;\n  margin-right: 5px;\n  padding: 0 0 0 12px;\n`;\n\nexport const DelButton = styled.button`\n  min-width: 67px;\n  min-height: 26px;\n  border-radius: 18px;\n  margin-right: 12px;\n  background-color: var(--text-green-color);\n  color: var(--text-white-color);\n  border: none;\n  cursor: pointer;\n`;\n\n// Mobile\nexport const MobList = styled.ul`\nfont-size: 16px;\n  font-family: var(--main-font);\n  font-style: normal;\n  color: var(--title-main-color);\n\n  width: 280px;\n  margin: 0 auto 8px;\n  background: var(--form-background-color);\n  border-radius: 10px;\n  border-left: 5px solid\n    ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;\n\nexport const MobItem = styled.li`\n  padding: 12px 20px;\n  height: 47px;\n  display: flex;\n  align-items: center;  \n  &:not(:last-child) {\n    border-bottom: 1px solid #dcdcdf;\n  }\n  justify-content: space-between;\n  line-height: calc(27 / 18);\n`;\n\nexport const MobHeader = styled.span`\n  font-weight: 700;\n  font-size: 18px;\n`;\n\nexport const MobComment = styled.span`\n  width: 80px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: pre-line;\n`;\n\nexport const MobSum = styled.span`\n  color: ${props =>\n      props.type === 'income'\n        ? 'var(--text-green-color)'\n        : 'var(--text-pink-color)'};\n`;","export const normalizedDate = date => {\n  const dateToString = new Date(date);\n  const day = dateToString.getDate().toString().padStart(2, '0');\n  const month = (dateToString.getMonth() + 1).toString().padStart(2, '0');\n  const year = dateToString.getFullYear().toString().slice(2);\n  return `${day}.${month}.${year}`;\n};\n","import { GrFormEdit } from 'react-icons/gr';\nimport { useMedia } from 'react-use';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { selectFinanceData } from 'redux/transaction/transactionSelectors';\nimport { openModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { useEffect } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { openModalConfirmation } from 'redux/global/globalSlice';\nimport {\n  Container,\n  Table,\n  TrHead,\n  ThDay,\n  ThType,\n  ThCategore,\n  ThComment,\n  ThCurrency,\n  ThEdit,\n  ThDel,\n  TrData,\n  TdDate,\n  TdType,\n  TdCadegory,\n  TdComment,\n  TdAmount,\n  TdEdit,\n  TdDel,\n  EditButton,\n  DelButton,\n  MobList,\n  MobItem,\n  MobHeader,\n  MobComment,\n  MobSum,\n} from './TransactionsList.styled';\nimport { normalizedDate } from './normalizedDate';\n\nexport const TransactionsList = ({ data, info }) => {\n  const isMobile = useMedia('(max-width: 767px)');\n  //  console.log(data);\n\n  const sortData = data.map(obj => ({\n    ...obj,\n    transactionDate: new Date(obj.transactionDate).toISOString().substr(0, 10),\n  }));\n\n  const categories = useSelector(selectCategories);\n  const financeData = useSelector(selectFinanceData);\n  const [trans, setTrans] = useState('');\n  const dispatch = useDispatch();\n\n  const saveTransaction = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalUpDateTransaction());\n  };\n\n  const saveTransactionForDelete = id => {\n    setTrans(financeData.find(trans => trans.id === id));\n    dispatch(openModalConfirmation());\n  };\n\n  const takeNameCategories = id => {\n    let nameCategories = categories.find(categorie => categorie.id === id);\n    if (nameCategories) return nameCategories.name;\n  };\n\n  useEffect(() => {\n    trans && info(trans);\n    // dispatch(openModalUpDateTransaction());\n  }, [dispatch, info, trans]);\n\n  return (\n    <>\n      {isMobile ? (\n        <>\n          {sortData.map(\n            ({ id, transactionDate, type, categoryId, comment, amount }) => (\n              <MobList key={id} type={type.toLowerCase()}>\n                <MobItem>\n                  <MobHeader>Date</MobHeader>\n                  {normalizedDate(transactionDate)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Type</MobHeader>\n                  {type.toLowerCase() === 'income' ? '+' : '-'}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Category</MobHeader>\n                  {takeNameCategories(categoryId)}\n                </MobItem>\n                <MobItem>\n                  <MobHeader>Comment</MobHeader>\n                  <MobComment>{comment}</MobComment>\n                </MobItem>\n                <MobItem style={{ fontWeight: '700' }}>\n                  <MobHeader>Sum</MobHeader>\n                  <MobSum type={type.toLowerCase()}>{amount.toFixed(2)}</MobSum>\n                </MobItem>\n                <MobItem>\n                  <DelButton\n                    onClick={() => saveTransactionForDelete(id)}\n                    //  onClick={() => dispatch(deleteTransaction(id))}\n                  >\n                    Delete\n                  </DelButton>\n                  <EditButton onClick={() => saveTransaction(id)}>\n                    <GrFormEdit\n                      style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        width: '30px',\n                        height: '30px',\n                      }}\n                    />\n                    Edit\n                  </EditButton>\n                </MobItem>\n              </MobList>\n            )\n          )}\n        </>\n      ) : (\n        //desctop\n        <Container>\n          <Table>\n            <thead>\n              <TrHead>\n                <ThDay>Date</ThDay>\n                <ThType>Type</ThType>\n                <ThCategore>Cotegory</ThCategore>\n                <ThComment>Comment</ThComment>\n                <ThCurrency>Currency</ThCurrency>\n                <ThEdit></ThEdit>\n                <ThDel></ThDel>\n              </TrHead>\n            </thead>\n            <tbody>\n              {sortData.map(\n                ({\n                  id,\n                  transactionDate,\n                  type,\n                  categoryId,\n                  comment,\n                  amount,\n                }) => (\n                  <TrData key={id}>\n                    <TdDate>{normalizedDate(transactionDate)}</TdDate>\n                    <TdType>\n                      {type.toLowerCase() === 'income' ? '+' : '-'}\n                    </TdType>\n                    <TdCadegory>{takeNameCategories(categoryId)}</TdCadegory>\n                    <TdComment>{comment}</TdComment>\n                    <TdAmount type={type}>{amount.toFixed(2)}</TdAmount>\n                    <TdEdit>\n                      <EditButton onClick={() => saveTransaction(id)}>\n                        <GrFormEdit\n                          style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            width: '30px',\n                            height: '30px',\n                          }}\n                        />\n                      </EditButton>\n                    </TdEdit>\n                    <TdDel>\n                      <DelButton\n                        onClick={() => saveTransactionForDelete(id)}\n                        // onClick={() => dispatch(deleteTransaction(id))}\n                      >\n                        Delete\n                      </DelButton>\n                    </TdDel>\n                  </TrData>\n                )\n              )}\n            </tbody>\n          </Table>\n        </Container>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 46px 0 0 69px;\n  width: 784px;\n`;\n","import { TransactionsList } from 'components/TransactionsList/TransactionsList';\nimport {\n  selectFinanceData,\n  selectIsLoading,\n} from 'redux/transaction/transactionSelectors';\nimport { useSelector } from 'react-redux';\nimport { fetchAllTransactions } from 'redux/transaction/transactionOperations';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Rings } from 'react-loader-spinner';\nimport { Container } from './HomeTab.styles';\n\nexport const HomeTab = props => {\n  const financeData = useSelector(selectFinanceData);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const compareData = financeData.map(obj => ({\n    ...obj,\n    transactionDate: Date.parse(obj.transactionDate),\n  }));\n  const sortDate = [...compareData].sort(\n    (a, b) => b.transactionDate - a.transactionDate\n  );\n\n  // console.log(sortDate);\n\n  useEffect(() => {\n    dispatch(fetchAllTransactions());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {financeData.length === 0 ? (\n        <p> You don't have transactions yet. </p>\n      ) : (\n        <div>\n          {isLoading ? (\n            <Rings />\n          ) : (\n            <>\n              <TransactionsList data={sortDate} info={props.info} />\n            </>\n          )}\n        </div>\n      )}\n    </Container>\n  );\n};\n","import { useState } from 'react';\nimport {\n  CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  LabelTextExpense,\n} from './ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeModalAddTransaction } from 'redux/global/globalSlice';\nimport { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { useEffect } from 'react';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\nimport moment from 'moment';\n\n// import { TextField } from '@mui/material';\n\nimport { IoCloseOutline } from 'react-icons/io5';\n\nimport { IconContext } from 'react-icons';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\n\nexport const ModalAddTransaction = () => {\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const currentDate = new Date(Date.now());\n\n  const [transactionDate, setTransactionDate] = useState(currentDate);\n  const [, setType] = useState('');\n  const [categoryId, setCategoryId] = useState('');\n  const [comment, setComment] = useState('');\n  const [amount, setAmount] = useState('');\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const handleChange = evt => {\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      setCategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const date = new Date(\n      transactionDate.toString().replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1')\n    );\n\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n\n    const obj = {\n      transactionDate: date,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(amount),\n    };\n    console.log(obj);\n\n    dispatch(addTransaction(obj));\n    reset();\n  };\n\n  const reset = () => {\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalAddTransaction());\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n\n  return (\n    <Overlay onClick={onClose}>\n      <Modal>\n        <ModalButtonClose type=\"button\" onClick={onClose}>\n          <IconContext.Provider value={{ size: '3em' }}>\n            <h3>\n              {' '}\n              <IoCloseOutline />{' '}\n            </h3>\n          </IconContext.Provider>\n        </ModalButtonClose>\n        <ModalForm onSubmit={handleSubmit}>\n          <ModalTitle> Add transaction</ModalTitle>\n\n          <Input\n            onChange={onChange}\n            checked={checked}\n            type=\"checkbox\"\n            name=\"topic\"\n            id=\"topic-1\"\n          />\n\n          <ModalWrap>\n            <LabelText checked={checked}>Income</LabelText>\n            <CheckboxLabel htmlFor=\"topic-1\" checked={checked}></CheckboxLabel>\n            <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n          </ModalWrap>\n\n          {checked && (\n            <SelectLabel\n              name=\"categoryId\"\n              onChange={handleChange}\n              value={categoryId}\n            >\n              {categories &&\n                categoriesFilter.map(({ id, name }) => {\n                  return (\n                    <option key={id} id={id}>\n                      {name}\n                    </option>\n                  );\n                })}\n            </SelectLabel>\n          )}\n\n          <ModalWrap>\n            <InputLabel\n              value={amount}\n              onChange={handleChange}\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"0.00\"\n            />\n            <Datetime\n              timeFormat={false}\n              name={transactionDate}\n              value={transactionDate}\n              onChange={newValue => {\n                setTransactionDate(moment(newValue).toISOString());\n              }}\n              renderInput={params => <InputLabel {...params} />}\n            />\n          </ModalWrap>\n          <InputLabelText\n            value={comment}\n            onChange={handleChange}\n            name=\"comment\"\n            placeholder=\"Comment\"\n          />\n\n          <ModalButtonWrap>\n            <ModalButtonAdd type=\"submit\">Add</ModalButtonAdd>\n            <ModalButtonCancel type=\"button\" onClick={onClose}>\n              Cancel\n            </ModalButtonCancel>\n          </ModalButtonWrap>\n        </ModalForm>\n      </Modal>\n    </Overlay>\n  );\n};\n","import { useState } from 'react';\nimport {\n  // CheckboxLabel,\n  InputLabel,\n  Modal,\n  ModalButtonCancel,\n  ModalButtonAdd,\n  ModalButtonWrap,\n  ModalForm,\n  ModalWrap,\n  Overlay,\n  InputLabelText,\n  ModalTitle,\n  SelectLabel,\n  ModalButtonClose,\n  Input,\n  LabelText,\n  CheckboxLabel,\n  LabelTextExpense,\n  // Input,\n  // LabelText,\n  // LabelTextExpense,\n} from '../ModalAddTransaction/ModalAddTransaction.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { closeModalAddTransaction } from 'redux/global/globalSlice';\n// import { addTransaction } from 'redux/transaction/transactionOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n// import { useEffect } from 'react';\n// import Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n// import moment from 'moment';\n// import { TextField } from '@mui/material';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { IconContext } from 'react-icons';\n\nimport { closeModalUpDateTransaction } from 'redux/global/globalSlice';\nimport { upDateTransaction } from 'redux/transaction/transactionOperations';\n// import { ModalButtonCancel } from 'components/ModalAddTransaction/ModalAddTransaction.styled';\n\nexport const UpDateModal = ({ trans, close }) => {\n  const [categoryId, setCategoryId] = useState(trans.categoryId);\n  const [amount, setAmount] = useState(Math.abs(trans.amount));\n  const [transactionDate, setTransactionDate] = useState(trans.transactionDate);\n  const [comment, setComment] = useState(trans.comment);\n  const [, setType] = useState(trans.type);\n  const [checked, setChecked] = useState(\n    trans.type === 'INCOME' ? false : true\n  );\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n\n  const handleSubmit = evt => {\n    const currentCategorie = categories.find(cat => cat.name === categoryId);\n    evt.preventDefault();\n    const newObject = {\n      transactionDate,\n      type: !checked ? 'INCOME' : 'EXPENSE',\n      categoryId: !checked\n        ? categories[10].id\n        : // :currentCategorie.id || categories[0].id,\n          (currentCategorie && currentCategorie.id) || categories[0].id,\n      comment,\n      amount: !checked ? Number(amount) : -Number(Math.abs(amount)),\n    };\n    // console.log(currentCategorie);\n\n    dispatch(\n      upDateTransaction({ transactionId: trans.id, dataInfo: newObject })\n    );\n    setTransactionDate('');\n    setType('');\n    setCategoryId('');\n    setComment('');\n    setAmount('');\n  };\n\n  const handleChange = evt => {\n    // console.log(evt.target);\n    const { value, name } = evt.target;\n    if (name === 'categoryId') {\n      setCategoryId(value);\n    } else if (name === 'amount') {\n      setAmount(value);\n    } else if (name === 'comment') {\n      setComment(value);\n    }\n  };\n\n  const onClose = evt => {\n    if (\n      evt.code === 'Escape' ||\n      evt.currentTarget === evt.target ||\n      evt.target.nodeName === 'svg'\n    ) {\n      dispatch(closeModalUpDateTransaction());\n\n      close('');\n    }\n  };\n\n  window.addEventListener('keydown', onClose);\n\n  const onChange = e => {\n    setChecked(e.target.checked);\n  };\n\n  const categoriesFilter = categories.filter(cat => cat.name !== 'Income');\n  const xxx = [...categoriesFilter].sort(function (x, y) {\n    return x.id === categoryId ? -1 : y.id === categoryId ? 1 : 0;\n  });\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <Modal>\n          <ModalButtonClose type=\"button\" onClick={onClose}>\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n          <ModalForm onSubmit={handleSubmit}>\n            <ModalTitle> Update transaction</ModalTitle>\n            <Input\n              onChange={onChange}\n              checked={checked}\n              type=\"checkbox\"\n              name=\"topic\"\n              id=\"topic-1\"\n            />\n            <ModalWrap>\n              <LabelText checked={checked}>Income</LabelText>\n              <CheckboxLabel\n                htmlFor=\"topic-1\"\n                checked={checked}\n              ></CheckboxLabel>\n              <LabelTextExpense checked={checked}>Expense</LabelTextExpense>\n            </ModalWrap>\n\n            {checked && (\n              <SelectLabel\n                name=\"categoryId\"\n                onChange={handleChange}\n                value={categoryId}\n              >\n                {categories &&\n                  xxx.map(({ id, name }) => {\n                    return (\n                      <option key={id} id={id}>\n                        {name}\n                      </option>\n                    );\n                  })}\n              </SelectLabel>\n            )}\n\n            <ModalWrap>\n              <InputLabel\n                value={amount}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                placeholder=\"0.00\"\n              />\n              {/* <Datetime\n                timeFormat={false}\n                name={transactionDate}\n                value={transactionDate}\n                renderInput={params => <InputLabel {...params} />}\n              /> */}\n              <InputLabel\n                value={transactionDate}\n                onChange={handleChange}\n                type=\"text\"\n                name=\"amount\"\n                disabled\n              />\n            </ModalWrap>\n            <InputLabelText\n              value={comment}\n              onChange={handleChange}\n              name=\"comment\"\n              placeholder=\"Comment\"\n            />\n\n            <ModalButtonWrap>\n              <ModalButtonAdd type=\"submit\">upDate</ModalButtonAdd>\n              <ModalButtonCancel type=\"button\" onClick={onClose}>\n                Cancel\n              </ModalButtonCancel>\n            </ModalButtonWrap>\n          </ModalForm>\n        </Modal>\n      </Overlay>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const BlockForAddButton = styled.div`\nposition: relative;\n`","import {\n  ModalButtonClose,\n  Overlay,\n} from 'components/ModalAddTransaction/ModalAddTransaction.styled';\nimport { IconContext } from 'react-icons';\nimport { IoCloseOutline } from 'react-icons/io5';\nimport { useDispatch } from 'react-redux';\nimport { closeModalConfirmation } from 'redux/global/globalSlice';\nimport { deleteTransaction } from 'redux/transaction/transactionOperations';\nimport {\n  ModalBtnCancel,\n  ModalButtonWrapper,\n  ModalButtonYes,\n  ModalConfirmationText,\n  ModalConfirmationTitle,\n  ModalContainer,\n} from './ModalConfirmation.styled';\n\nexport const ModalConfirmation = ({transId}) => {\n  console.log(transId);\n  const dispatch = useDispatch();\n\n  \n\n  const onClose = evt => {\n    if (evt.code === 'Escape' || evt.currentTarget === evt.target) {\n      dispatch(closeModalConfirmation());\n    }\n  };\n\n\n\n  window.addEventListener('keydown', onClose);\n\n  return (\n    <>\n      <Overlay onClick={onClose}>\n        <ModalContainer>\n          <ModalButtonClose\n            type=\"button\"\n            onClick={() => dispatch(closeModalConfirmation())}\n          >\n            <IconContext.Provider value={{ size: '3em' }}>\n              <h3>\n                {' '}\n                <IoCloseOutline />{' '}\n              </h3>\n            </IconContext.Provider>\n          </ModalButtonClose>\n\n          <ModalConfirmationTitle>Confirmation</ModalConfirmationTitle>\n          <ModalConfirmationText>\n            Are you sure you want this?\n          </ModalConfirmationText>\n\n          <ModalButtonWrapper>\n            <ModalBtnCancel\n              type=\"button\"\n              onClick={() => dispatch(closeModalConfirmation())}\n            >\n              Cancel\n            </ModalBtnCancel>\n            <ModalButtonYes\n              type=\"button\"\n              \n              onClick={()=>dispatch(deleteTransaction(transId.id))}\n            >\n              Yes, I'm sure!\n            </ModalButtonYes>\n          </ModalButtonWrapper>\n        </ModalContainer>\n      </Overlay>\n    </>\n  );\n};\n","import { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { HomeTab } from 'components/HomeTab/HomeTab';\nimport {\n  selectAddTransactionOpen,\n  selectUpDateTransactionsModal,\n  selectModalConfirmation,\n} from 'redux/global/globalSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useEffect } from 'react';\nimport { fetchCategories } from 'redux/categories/categoriesOperations';\nimport { useState } from 'react';\nimport { UpDateModal } from 'components/upDateModal/upDateModal';\nimport { BlockForAddButton } from './HomePage.styled';\nimport { ModalConfirmation } from 'components/ModalConfirmation/ModalConfirmation';\n\nconst HomePage = () => {\n  const isModalAddTransactionOpen = useSelector(selectAddTransactionOpen);\n  const isModalUpDateTransaction = useSelector(selectUpDateTransactionsModal);\n  const isModalConfirmations = useSelector(selectModalConfirmation);\n  console.log(isModalAddTransactionOpen);\n  console.log(isModalUpDateTransaction);\n  console.log(isModalConfirmations);\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchCategories());\n  }, [dispatch]);\n\n  return (\n    <BlockForAddButton>\n      <HomeTab info={setData} />\n      <ButtonAddTransactions />\n      {isModalConfirmations && data && (\n        <ModalConfirmation transId={data} />\n      )}\n      {isModalUpDateTransaction && data && (\n        <UpDateModal trans={data} close={setData} />\n      )}\n      {isModalAddTransactionOpen && <ModalAddTransaction />}\n    </BlockForAddButton>\n  );\n};\n\nexport default HomePage;\n"],"names":["Button","styled","ButtonAddTransactions","dispatch","useDispatch","onClick","openModalAddTransaction","style","display","width","height","backgroundColor","borderRadius","color","selectFinanceData","state","transactions","finance","data","selectIsLoading","isLoading","selectCategories","categories","Container","Table","TrHead","ThDay","ThType","ThCategore","ThComment","ThCurrency","ThEdit","ThDel","TrData","TdDate","TdType","TdCadegory","TdComment","TdAmount","props","type","TdEdit","TdDel","EditButton","DelButton","MobList","MobItem","MobHeader","MobComment","MobSum","normalizedDate","date","dateToString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","TransactionsList","info","isMobile","useMedia","sortData","map","obj","transactionDate","toISOString","substr","useSelector","financeData","useState","trans","setTrans","saveTransaction","id","find","openModalUpDateTransaction","saveTransactionForDelete","openModalConfirmation","takeNameCategories","nameCategories","categorie","name","useEffect","categoryId","comment","amount","toLowerCase","fontWeight","toFixed","alignItems","HomeTab","compareData","parse","sortDate","sort","a","b","fetchAllTransactions","length","ModalAddTransaction","currentDate","now","setTransactionDate","setType","setCategoryId","setComment","setAmount","checked","setChecked","fetchCategories","handleChange","evt","target","value","reset","onClose","code","currentTarget","nodeName","closeModalAddTransaction","window","addEventListener","categoriesFilter","filter","cat","size","onSubmit","preventDefault","replace","currentCategorie","Number","console","log","addTransaction","onChange","e","htmlFor","placeholder","timeFormat","newValue","moment","renderInput","params","UpDateModal","close","Math","abs","closeModalUpDateTransaction","xxx","x","y","newObject","upDateTransaction","transactionId","dataInfo","disabled","BlockForAddButton","ModalConfirmation","transId","closeModalConfirmation","deleteTransaction","isModalAddTransactionOpen","selectAddTransactionOpen","isModalUpDateTransaction","selectUpDateTransactionsModal","isModalConfirmations","selectModalConfirmation","setData"],"sourceRoot":""}